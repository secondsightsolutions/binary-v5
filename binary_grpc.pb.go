// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: binary.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BinarySvc_NewScrub_FullMethodName = "/binary.BinarySvc/NewScrub"
	BinarySvc_GetData_FullMethodName  = "/binary.BinarySvc/GetData"
	BinarySvc_PutData_FullMethodName  = "/binary.BinarySvc/PutData"
)

// BinarySvcClient is the client API for BinarySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinarySvcClient interface {
	NewScrub(ctx context.Context, in *NewScrubReq, opts ...grpc.CallOption) (*NewScrubRes, error)
	GetData(ctx context.Context, in *GetDataReq, opts ...grpc.CallOption) (BinarySvc_GetDataClient, error)
	PutData(ctx context.Context, opts ...grpc.CallOption) (BinarySvc_PutDataClient, error)
}

type binarySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewBinarySvcClient(cc grpc.ClientConnInterface) BinarySvcClient {
	return &binarySvcClient{cc}
}

func (c *binarySvcClient) NewScrub(ctx context.Context, in *NewScrubReq, opts ...grpc.CallOption) (*NewScrubRes, error) {
	out := new(NewScrubRes)
	err := c.cc.Invoke(ctx, BinarySvc_NewScrub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binarySvcClient) GetData(ctx context.Context, in *GetDataReq, opts ...grpc.CallOption) (BinarySvc_GetDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &BinarySvc_ServiceDesc.Streams[0], BinarySvc_GetData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &binarySvcGetDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BinarySvc_GetDataClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type binarySvcGetDataClient struct {
	grpc.ClientStream
}

func (x *binarySvcGetDataClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *binarySvcClient) PutData(ctx context.Context, opts ...grpc.CallOption) (BinarySvc_PutDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &BinarySvc_ServiceDesc.Streams[1], BinarySvc_PutData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &binarySvcPutDataClient{stream}
	return x, nil
}

type BinarySvc_PutDataClient interface {
	Send(*Data) error
	CloseAndRecv() (*Res, error)
	grpc.ClientStream
}

type binarySvcPutDataClient struct {
	grpc.ClientStream
}

func (x *binarySvcPutDataClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *binarySvcPutDataClient) CloseAndRecv() (*Res, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BinarySvcServer is the server API for BinarySvc service.
// All implementations must embed UnimplementedBinarySvcServer
// for forward compatibility
type BinarySvcServer interface {
	NewScrub(context.Context, *NewScrubReq) (*NewScrubRes, error)
	GetData(*GetDataReq, BinarySvc_GetDataServer) error
	PutData(BinarySvc_PutDataServer) error
	mustEmbedUnimplementedBinarySvcServer()
}

// UnimplementedBinarySvcServer must be embedded to have forward compatible implementations.
type UnimplementedBinarySvcServer struct {
}

func (UnimplementedBinarySvcServer) NewScrub(context.Context, *NewScrubReq) (*NewScrubRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewScrub not implemented")
}
func (UnimplementedBinarySvcServer) GetData(*GetDataReq, BinarySvc_GetDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedBinarySvcServer) PutData(BinarySvc_PutDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PutData not implemented")
}
func (UnimplementedBinarySvcServer) mustEmbedUnimplementedBinarySvcServer() {}

// UnsafeBinarySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinarySvcServer will
// result in compilation errors.
type UnsafeBinarySvcServer interface {
	mustEmbedUnimplementedBinarySvcServer()
}

func RegisterBinarySvcServer(s grpc.ServiceRegistrar, srv BinarySvcServer) {
	s.RegisterService(&BinarySvc_ServiceDesc, srv)
}

func _BinarySvc_NewScrub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewScrubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinarySvcServer).NewScrub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinarySvc_NewScrub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinarySvcServer).NewScrub(ctx, req.(*NewScrubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinarySvc_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDataReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BinarySvcServer).GetData(m, &binarySvcGetDataServer{stream})
}

type BinarySvc_GetDataServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type binarySvcGetDataServer struct {
	grpc.ServerStream
}

func (x *binarySvcGetDataServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _BinarySvc_PutData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BinarySvcServer).PutData(&binarySvcPutDataServer{stream})
}

type BinarySvc_PutDataServer interface {
	SendAndClose(*Res) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type binarySvcPutDataServer struct {
	grpc.ServerStream
}

func (x *binarySvcPutDataServer) SendAndClose(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *binarySvcPutDataServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BinarySvc_ServiceDesc is the grpc.ServiceDesc for BinarySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinarySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "binary.BinarySvc",
	HandlerType: (*BinarySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewScrub",
			Handler:    _BinarySvc_NewScrub_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _BinarySvc_GetData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutData",
			Handler:       _BinarySvc_PutData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "binary.proto",
}
