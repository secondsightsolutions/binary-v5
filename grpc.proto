syntax = "proto3";

// export PATH="$PATH:$(go env GOPATH)/bin"
// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative grpc.proto

option go_package = "github.com/secondsightsolutions/binary-v5/main";

package main;

message Invoice {
    int64  ivid = 1;    // invoice id
    int64  cmid = 2;
    string xou  = 3;
    string manu = 4;
    string name = 5;
    string kind = 6;
    string auth = 7;
    string vers = 8;
    string dscr = 9;
    string hash = 10;
    string netw = 11;
    string host = 12;
    string user = 13;
    string addr = 14;   // public address seen on incoming command
    string cmdl = 15;
    string cwd  = 16;   // current working directory
    string file = 17;
    string hdrs = 18;
    int64  crat = 19;
}

message Rebate {
    int64  ivid = 1;    // invoice id
    int64  rbid = 2;    // rebate id - generated row number
    string ndc  = 3;
    string rxn  = 4;
    string hrxn = 5;
    string spid = 6;    // service provider id
    string prid = 7;    // prescriber provider id
    int64  dos  = 8;    // date of service
    string hdos = 9;
    string data = 10;
    string manu = 11;
}

message Scrub {
    int64  scid = 1;
    int64  ivid = 2;
    string cmid = 3;
    string manu = 4;
    string plcy = 5;
    string prof = 6;    // Policy profile
    string cust = 7;    // custom (added) column hdrs in results (like 340b_id, etc). This is a CSV list. (written by policy)
    string test = 8;
    int64  crat = 9;
    int64  rdat = 10;
    int64  srat = 11;
    int64  dnat = 12;
    int64  seq  = 13;
}

message Claim {
    string clid = 1;
    string i340 = 2;
    string ndc  = 3;
    string spid = 4;
    string prid = 5;
    string hrxn = 6;
    string hfrx = 7;
    string hdos = 8;
    string hdop = 9;
    int64  doc  = 10;
    int64  dos  = 11;
    int64  dop  = 12;
    string netw = 13;
    string prnm = 14;
    string chnm = 15;
    bool   elig = 16;
    bool   susp = 17;
    bool   cnfm = 18;
    float  qty  = 19;
    string ihph = 20;
    string manu = 21;
    int64  seq  = 22;
}

message ScrubRebate {
    string manu = 1;
    int64  scid = 2;
    int64  ivid = 3;
    int64  rbid = 4;
    string stat = 5;
    string spmt = 6;   // service provider match type: exact, xwalk, stack, chain
    string fprt = 7;
    string excl = 8;    // If a rebate prep phase has excluded this rebate
    string errc = 9;
    string errm = 10;
    string data = 11;   // Original data row from invoice_rows (note this is not stored in scrub_rebates - here for mapping convenience).
    string cust = 12;   // custom (added) column data in results (like 340b_id value, etc). This is a CSV list.
    int64  seq  = 13;
}

message ScrubMatch {
    string manu = 1;
    int64  scid = 2;
    int64  ivid = 3;
    int64  rbid = 4;
    string clid = 5;
    int64  seq  = 6;
}

message ScrubAttempt {
    string manu = 1;
    int64  scid = 2;
    int64  ivid = 3;
    int64  rbid = 4;
    string clid = 5;
    string excl = 6;
    int64  seq  = 7;
}

message ScrubClaim {
    string manu = 1;
    int64  scid = 2;
    string clid = 3;
    string excl = 4;
    int64  seq  = 5;
}

message ScrubRow {
    string row = 1;
}

message Command {
    int64  cmid  = 1;
    string comd = 2;    // GRPC service API call (endpoint/function name)
    string xou  = 3;
    string manu = 4;
    string name = 5;
    string kind = 6;
    string auth = 7;
    string vers = 8;
    string dscr = 9;
    string hash = 10;
    string netw = 11;
    string host = 12;
    string user = 13;
    string addr = 14;   // public address seen on incoming command
    string cmdl = 15;
    string cwd  = 16;   // current working directory
    string rslt = 17;
    int64  crat = 18;
    int64  dnat = 19;
    int64  seq  = 20;
}

message Entity {
    int64  seq   = 1;
    string i340  = 2;
    string state = 3;
    int64  strt  = 4;
    int64  term  = 5;
}
message Pharmacy {
    string i340 = 1;
    string phid = 2;
    string chnm = 3;
    string ncps = 4;
    string npis = 5;
    string deas = 6;
    string state = 7;
    int64  seq   = 8;
}
message NDC {
    string manu = 1;
    string ndc  = 2;
    string name = 3;
    string netw = 4;
    int64  seq  = 5;
}
message SPI {
    string ncp = 1;
    string npi = 2;
    string dea = 3;
    string sto = 4;
    string nam = 5;
    string lbn = 6;
    string chn = 7;
    string cde = 8;   // NCPDP 340b status code
    int64  seq = 9;
}
message Designation {
    string manu = 1;
    string i340 = 2;
    string flag = 4;
    string phid = 5;
    bool   assg = 6;
    bool   term = 7;
    int64  xdat = 8;   // expired_at
    int64  dlat = 9;
    int64  xsat = 10;  // expires_at
    int64  crat = 12;  // created_at
    int64  cpat = 13;
    string hin  = 14;
    int64  seq  = 15;
}
message LDN {
    string manu = 1;
    string netw = 2;
    string i340 = 3;
    bool   crat = 4;
    int64  seq  = 5;
}
message ESP1PharmNDC {
    string  manu = 1;
    string  spid = 2;
    string  ndc  = 3;
    int64   strt = 4;
    int64   term = 5;
    int64   seq  = 6;
}
message Eligibility {
    int64  seq    = 1;   // id
    string i340   = 2;   // id_340b
    string phid   = 3;   // pharmacy_id
    string manu   = 4;   // manufacturer
    string netw   = 5;   // network
    int64  strt   = 6;   // start_at
    int64  term   = 7;   // end_at
}

message Auth {
    string manu = 1;
    string proc = 2;
    string auth = 3;
    string kind = 4;
    int64  vers = 5;
    bool   enb  = 6;
}

message Req {
}
message Res {
}
message SyncReq {
    int64  last = 1;
}
message InvoiceIdent {
    string manu = 1;
    int64  ivid = 2;
}
message ScrubRes {
    int64 scid = 1;
}
message ScrubIdent {
    string manu = 1;
    int64  scid = 2;
}

message Metrics {
    string  manu                = 1;
    int64   scid                = 2;
    int64   ivid                = 3;
    int32   rbt_total           = 4;
    int32   rbt_valid           = 5;
    int32   rbt_matched         = 6;
    int32   rbt_nomatch         = 7;
    int32   rbt_invalid         = 8;
    int32   rbt_passed          = 9;
    int32   rbt_failed          = 10;
    int32   clm_total           = 11;
    int32   clm_valid           = 12;
    int32   clm_matched         = 13;
    int32   clm_nomatch         = 14;
    int32   clm_invalid         = 15;
    int32   spi_exact           = 16;
    int32   spi_cross           = 17;
    int32   spi_stack           = 18;
    int32   spi_chain           = 19;
    int32   dos_equ_doc         = 20;
    int32   dos_bef_doc         = 21;
    int32   dos_aft_doc         = 22;
    int32   dos_equ_dof         = 23;
    int32   dos_bef_dof         = 24;
    int32   dos_aft_dof         = 25;
    int32   dos_range_pass      = 26;
    int32   dos_range_fail      = 27;
    int32   dof_range_pass      = 28;
    int32   dof_range_fail      = 29;
    int32   doc_range_pass      = 30;
    int32   doc_range_fail      = 31;
    int32   r_no_match_rx       = 32;
    int32   r_no_match_spi      = 33;
    int32   r_no_match_ndc      = 34;
    int32   r_clm_used          = 35;
    int32   r_dos_rbt_aft_clm   = 36;
    int32   r_dos_clm_aft_rbt   = 37;
    int32   r_old_rbt_new_clm   = 38;
    int32   r_new_rbt_old_clm   = 39;
    int32   r_clm_not_cnfm      = 40;
    int32   r_phm_not_desg      = 41;
    int32   r_inv_desg_type     = 42;
    int32   r_wrong_network     = 43;
    int32   r_not_elig_at_sub   = 44;
    int64   load_rebates        = 45;
    int64   prep_claims         = 46;
    int64   pull_rebates        = 47;
    int64   work_rebates        = 48;
    int64   save_rebates        = 49;
    int64   save_scrub_rebates  = 50;
    int64   save_scrub_matches  = 51;
    int64   save_scrub_attempts = 52;
    int64   save_scrub_claims   = 53;
    int64   seq                 = 54;
}
message TestData {
    repeated Claim        claims     = 1;
    repeated Entity       entities   = 2;
    repeated Pharmacy     pharmacies = 3;
    repeated NDC          ndcs       = 4;
    repeated SPI          spis       = 5;
    repeated Designation  desigs     = 6;
    repeated LDN          ldns       = 7;
    repeated ESP1PharmNDC esp1       = 8;
    repeated Eligibility  ledger     = 9;
    string name = 10;
}
service Atlas {
    rpc Ping(Req)                           returns (Res) {}
    rpc UploadInvoice(stream Rebate)        returns (Res) {}
    rpc RunScrub(InvoiceIdent)              returns (stream Metrics) {}
    rpc RunQueue(InvoiceIdent)              returns (ScrubRes) {}
    rpc GetScrub(ScrubIdent)                returns (Scrub) {}
    rpc GetScrubMetrics(ScrubIdent)         returns (Metrics) {}
    rpc GetScrubRebates(ScrubIdent)         returns (stream ScrubRebate) {}
    rpc GetScrubFile(ScrubIdent)            returns (stream ScrubRow) {}
    rpc GetInvoice(InvoiceIdent)            returns (Invoice) {}
    rpc GetInvoiceRebates(InvoiceIdent)     returns (stream Rebate) {}
    rpc UploadTest(TestData)                returns (Res) {}
}

service Titan {
    rpc Ping(Req)                           returns (Res) {}
    rpc GetClaims(SyncReq)                  returns (stream Claim) {}
    rpc GetSPIs(SyncReq)                    returns (stream SPI) {}
    rpc GetNDCs(SyncReq)                    returns (stream NDC) {}
    rpc GetEntities(SyncReq)                returns (stream Entity) {}
    rpc GetPharmacies(SyncReq)              returns (stream Pharmacy) {}
    rpc GetESP1Pharms(SyncReq)              returns (stream ESP1PharmNDC) {}
    rpc GetEligibilityLedger(SyncReq)       returns (stream Eligibility) {}
    rpc GetAuths(SyncReq)                   returns (stream Auth) {}
    rpc GetDesignations(SyncReq)            returns (stream Designation) {}
    rpc GetLDNs(SyncReq)                    returns (stream LDN) {}

    rpc SyncCommands(stream Command)                    returns (Res) {}
    rpc SyncScrubs(stream Scrub)                        returns (Res) {}
    rpc SyncMetrics(stream Metrics)                     returns (Res) {}
    rpc SyncScrubRebates(stream ScrubRebate)            returns (Res) {}
    rpc SyncScrubClaims(stream ScrubClaim)              returns (Res) {}
    rpc SyncScrubMatches(stream ScrubMatch)             returns (Res) {}
    rpc SyncScrubAttempts(stream ScrubAttempt)          returns (Res) {}
}