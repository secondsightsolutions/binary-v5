// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: grpc.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Invoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ivid int64  `protobuf:"varint,1,opt,name=ivid,proto3" json:"ivid,omitempty"` // invoice id
	Cmid int64  `protobuf:"varint,2,opt,name=cmid,proto3" json:"cmid,omitempty"`
	Xou  string `protobuf:"bytes,3,opt,name=xou,proto3" json:"xou,omitempty"`
	Manu string `protobuf:"bytes,4,opt,name=manu,proto3" json:"manu,omitempty"`
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Kind string `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	Auth string `protobuf:"bytes,7,opt,name=auth,proto3" json:"auth,omitempty"`
	Vers string `protobuf:"bytes,8,opt,name=vers,proto3" json:"vers,omitempty"`
	Dscr string `protobuf:"bytes,9,opt,name=dscr,proto3" json:"dscr,omitempty"`
	Hash string `protobuf:"bytes,10,opt,name=hash,proto3" json:"hash,omitempty"`
	Netw string `protobuf:"bytes,11,opt,name=netw,proto3" json:"netw,omitempty"`
	Host string `protobuf:"bytes,12,opt,name=host,proto3" json:"host,omitempty"`
	User string `protobuf:"bytes,13,opt,name=user,proto3" json:"user,omitempty"`
	Addr string `protobuf:"bytes,14,opt,name=addr,proto3" json:"addr,omitempty"` // public address seen on incoming command
	Cmdl string `protobuf:"bytes,15,opt,name=cmdl,proto3" json:"cmdl,omitempty"`
	Cwd  string `protobuf:"bytes,16,opt,name=cwd,proto3" json:"cwd,omitempty"` // current working directory
	File string `protobuf:"bytes,17,opt,name=file,proto3" json:"file,omitempty"`
	Hdrs string `protobuf:"bytes,18,opt,name=hdrs,proto3" json:"hdrs,omitempty"`
	Crat int64  `protobuf:"varint,19,opt,name=crat,proto3" json:"crat,omitempty"`
}

func (x *Invoice) Reset() {
	*x = Invoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invoice) ProtoMessage() {}

func (x *Invoice) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invoice.ProtoReflect.Descriptor instead.
func (*Invoice) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *Invoice) GetIvid() int64 {
	if x != nil {
		return x.Ivid
	}
	return 0
}

func (x *Invoice) GetCmid() int64 {
	if x != nil {
		return x.Cmid
	}
	return 0
}

func (x *Invoice) GetXou() string {
	if x != nil {
		return x.Xou
	}
	return ""
}

func (x *Invoice) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *Invoice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Invoice) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Invoice) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *Invoice) GetVers() string {
	if x != nil {
		return x.Vers
	}
	return ""
}

func (x *Invoice) GetDscr() string {
	if x != nil {
		return x.Dscr
	}
	return ""
}

func (x *Invoice) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Invoice) GetNetw() string {
	if x != nil {
		return x.Netw
	}
	return ""
}

func (x *Invoice) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Invoice) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Invoice) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Invoice) GetCmdl() string {
	if x != nil {
		return x.Cmdl
	}
	return ""
}

func (x *Invoice) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *Invoice) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Invoice) GetHdrs() string {
	if x != nil {
		return x.Hdrs
	}
	return ""
}

func (x *Invoice) GetCrat() int64 {
	if x != nil {
		return x.Crat
	}
	return 0
}

type Rebate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ivid int64  `protobuf:"varint,1,opt,name=ivid,proto3" json:"ivid,omitempty"` // invoice id
	Rbid int64  `protobuf:"varint,2,opt,name=rbid,proto3" json:"rbid,omitempty"` // rebate id - generated row number
	Ndc  string `protobuf:"bytes,3,opt,name=ndc,proto3" json:"ndc,omitempty"`
	Rxn  string `protobuf:"bytes,4,opt,name=rxn,proto3" json:"rxn,omitempty"`
	Hrxn string `protobuf:"bytes,5,opt,name=hrxn,proto3" json:"hrxn,omitempty"`
	Spid string `protobuf:"bytes,6,opt,name=spid,proto3" json:"spid,omitempty"` // service provider id
	Prid string `protobuf:"bytes,7,opt,name=prid,proto3" json:"prid,omitempty"` // prescriber provider id
	Dos  int64  `protobuf:"varint,8,opt,name=dos,proto3" json:"dos,omitempty"`  // date of service
	Hdos string `protobuf:"bytes,9,opt,name=hdos,proto3" json:"hdos,omitempty"`
	Data string `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	Manu string `protobuf:"bytes,11,opt,name=manu,proto3" json:"manu,omitempty"`
}

func (x *Rebate) Reset() {
	*x = Rebate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rebate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rebate) ProtoMessage() {}

func (x *Rebate) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rebate.ProtoReflect.Descriptor instead.
func (*Rebate) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *Rebate) GetIvid() int64 {
	if x != nil {
		return x.Ivid
	}
	return 0
}

func (x *Rebate) GetRbid() int64 {
	if x != nil {
		return x.Rbid
	}
	return 0
}

func (x *Rebate) GetNdc() string {
	if x != nil {
		return x.Ndc
	}
	return ""
}

func (x *Rebate) GetRxn() string {
	if x != nil {
		return x.Rxn
	}
	return ""
}

func (x *Rebate) GetHrxn() string {
	if x != nil {
		return x.Hrxn
	}
	return ""
}

func (x *Rebate) GetSpid() string {
	if x != nil {
		return x.Spid
	}
	return ""
}

func (x *Rebate) GetPrid() string {
	if x != nil {
		return x.Prid
	}
	return ""
}

func (x *Rebate) GetDos() int64 {
	if x != nil {
		return x.Dos
	}
	return 0
}

func (x *Rebate) GetHdos() string {
	if x != nil {
		return x.Hdos
	}
	return ""
}

func (x *Rebate) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Rebate) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

type Scrub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scid int64  `protobuf:"varint,1,opt,name=scid,proto3" json:"scid,omitempty"`
	Ivid int64  `protobuf:"varint,2,opt,name=ivid,proto3" json:"ivid,omitempty"`
	Cmid string `protobuf:"bytes,3,opt,name=cmid,proto3" json:"cmid,omitempty"`
	Manu string `protobuf:"bytes,4,opt,name=manu,proto3" json:"manu,omitempty"`
	Plcy string `protobuf:"bytes,5,opt,name=plcy,proto3" json:"plcy,omitempty"`
	Prof string `protobuf:"bytes,6,opt,name=prof,proto3" json:"prof,omitempty"` // Policy profile
	Cust string `protobuf:"bytes,7,opt,name=cust,proto3" json:"cust,omitempty"` // custom (added) column hdrs in results (like 340b_id, etc). This is a CSV list. (written by policy)
	Test string `protobuf:"bytes,8,opt,name=test,proto3" json:"test,omitempty"`
	Crat int64  `protobuf:"varint,9,opt,name=crat,proto3" json:"crat,omitempty"`
	Rdat int64  `protobuf:"varint,10,opt,name=rdat,proto3" json:"rdat,omitempty"`
	Srat int64  `protobuf:"varint,11,opt,name=srat,proto3" json:"srat,omitempty"`
	Dnat int64  `protobuf:"varint,12,opt,name=dnat,proto3" json:"dnat,omitempty"`
	Seq  int64  `protobuf:"varint,13,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *Scrub) Reset() {
	*x = Scrub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scrub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scrub) ProtoMessage() {}

func (x *Scrub) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scrub.ProtoReflect.Descriptor instead.
func (*Scrub) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *Scrub) GetScid() int64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

func (x *Scrub) GetIvid() int64 {
	if x != nil {
		return x.Ivid
	}
	return 0
}

func (x *Scrub) GetCmid() string {
	if x != nil {
		return x.Cmid
	}
	return ""
}

func (x *Scrub) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *Scrub) GetPlcy() string {
	if x != nil {
		return x.Plcy
	}
	return ""
}

func (x *Scrub) GetProf() string {
	if x != nil {
		return x.Prof
	}
	return ""
}

func (x *Scrub) GetCust() string {
	if x != nil {
		return x.Cust
	}
	return ""
}

func (x *Scrub) GetTest() string {
	if x != nil {
		return x.Test
	}
	return ""
}

func (x *Scrub) GetCrat() int64 {
	if x != nil {
		return x.Crat
	}
	return 0
}

func (x *Scrub) GetRdat() int64 {
	if x != nil {
		return x.Rdat
	}
	return 0
}

func (x *Scrub) GetSrat() int64 {
	if x != nil {
		return x.Srat
	}
	return 0
}

func (x *Scrub) GetDnat() int64 {
	if x != nil {
		return x.Dnat
	}
	return 0
}

func (x *Scrub) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type Claim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clid string  `protobuf:"bytes,1,opt,name=clid,proto3" json:"clid,omitempty"`
	I340 string  `protobuf:"bytes,2,opt,name=i340,proto3" json:"i340,omitempty"`
	Ndc  string  `protobuf:"bytes,3,opt,name=ndc,proto3" json:"ndc,omitempty"`
	Spid string  `protobuf:"bytes,4,opt,name=spid,proto3" json:"spid,omitempty"`
	Prid string  `protobuf:"bytes,5,opt,name=prid,proto3" json:"prid,omitempty"`
	Hrxn string  `protobuf:"bytes,6,opt,name=hrxn,proto3" json:"hrxn,omitempty"`
	Hfrx string  `protobuf:"bytes,7,opt,name=hfrx,proto3" json:"hfrx,omitempty"`
	Hdos string  `protobuf:"bytes,8,opt,name=hdos,proto3" json:"hdos,omitempty"`
	Hdop string  `protobuf:"bytes,9,opt,name=hdop,proto3" json:"hdop,omitempty"`
	Doc  int64   `protobuf:"varint,10,opt,name=doc,proto3" json:"doc,omitempty"`
	Dos  int64   `protobuf:"varint,11,opt,name=dos,proto3" json:"dos,omitempty"`
	Dop  int64   `protobuf:"varint,12,opt,name=dop,proto3" json:"dop,omitempty"`
	Netw string  `protobuf:"bytes,13,opt,name=netw,proto3" json:"netw,omitempty"`
	Prnm string  `protobuf:"bytes,14,opt,name=prnm,proto3" json:"prnm,omitempty"`
	Chnm string  `protobuf:"bytes,15,opt,name=chnm,proto3" json:"chnm,omitempty"`
	Elig bool    `protobuf:"varint,16,opt,name=elig,proto3" json:"elig,omitempty"`
	Susp bool    `protobuf:"varint,17,opt,name=susp,proto3" json:"susp,omitempty"`
	Cnfm bool    `protobuf:"varint,18,opt,name=cnfm,proto3" json:"cnfm,omitempty"`
	Qty  float32 `protobuf:"fixed32,19,opt,name=qty,proto3" json:"qty,omitempty"`
	Ihph string  `protobuf:"bytes,20,opt,name=ihph,proto3" json:"ihph,omitempty"`
	Manu string  `protobuf:"bytes,21,opt,name=manu,proto3" json:"manu,omitempty"`
	Seq  int64   `protobuf:"varint,22,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *Claim) Reset() {
	*x = Claim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim) ProtoMessage() {}

func (x *Claim) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim.ProtoReflect.Descriptor instead.
func (*Claim) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *Claim) GetClid() string {
	if x != nil {
		return x.Clid
	}
	return ""
}

func (x *Claim) GetI340() string {
	if x != nil {
		return x.I340
	}
	return ""
}

func (x *Claim) GetNdc() string {
	if x != nil {
		return x.Ndc
	}
	return ""
}

func (x *Claim) GetSpid() string {
	if x != nil {
		return x.Spid
	}
	return ""
}

func (x *Claim) GetPrid() string {
	if x != nil {
		return x.Prid
	}
	return ""
}

func (x *Claim) GetHrxn() string {
	if x != nil {
		return x.Hrxn
	}
	return ""
}

func (x *Claim) GetHfrx() string {
	if x != nil {
		return x.Hfrx
	}
	return ""
}

func (x *Claim) GetHdos() string {
	if x != nil {
		return x.Hdos
	}
	return ""
}

func (x *Claim) GetHdop() string {
	if x != nil {
		return x.Hdop
	}
	return ""
}

func (x *Claim) GetDoc() int64 {
	if x != nil {
		return x.Doc
	}
	return 0
}

func (x *Claim) GetDos() int64 {
	if x != nil {
		return x.Dos
	}
	return 0
}

func (x *Claim) GetDop() int64 {
	if x != nil {
		return x.Dop
	}
	return 0
}

func (x *Claim) GetNetw() string {
	if x != nil {
		return x.Netw
	}
	return ""
}

func (x *Claim) GetPrnm() string {
	if x != nil {
		return x.Prnm
	}
	return ""
}

func (x *Claim) GetChnm() string {
	if x != nil {
		return x.Chnm
	}
	return ""
}

func (x *Claim) GetElig() bool {
	if x != nil {
		return x.Elig
	}
	return false
}

func (x *Claim) GetSusp() bool {
	if x != nil {
		return x.Susp
	}
	return false
}

func (x *Claim) GetCnfm() bool {
	if x != nil {
		return x.Cnfm
	}
	return false
}

func (x *Claim) GetQty() float32 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *Claim) GetIhph() string {
	if x != nil {
		return x.Ihph
	}
	return ""
}

func (x *Claim) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *Claim) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type ScrubRebate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manu string `protobuf:"bytes,1,opt,name=manu,proto3" json:"manu,omitempty"`
	Scid int64  `protobuf:"varint,2,opt,name=scid,proto3" json:"scid,omitempty"`
	Ivid int64  `protobuf:"varint,3,opt,name=ivid,proto3" json:"ivid,omitempty"`
	Rbid int64  `protobuf:"varint,4,opt,name=rbid,proto3" json:"rbid,omitempty"`
	Stat string `protobuf:"bytes,5,opt,name=stat,proto3" json:"stat,omitempty"`
	Spmt string `protobuf:"bytes,6,opt,name=spmt,proto3" json:"spmt,omitempty"` // service provider match type: exact, xwalk, stack, chain
	Fprt string `protobuf:"bytes,7,opt,name=fprt,proto3" json:"fprt,omitempty"`
	Excl string `protobuf:"bytes,8,opt,name=excl,proto3" json:"excl,omitempty"` // If a rebate prep phase has excluded this rebate
	Errc string `protobuf:"bytes,9,opt,name=errc,proto3" json:"errc,omitempty"`
	Errm string `protobuf:"bytes,10,opt,name=errm,proto3" json:"errm,omitempty"`
	Data string `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"` // Original data row from invoice_rows (note this is not stored in scrub_rebates - here for mapping convenience).
	Cust string `protobuf:"bytes,12,opt,name=cust,proto3" json:"cust,omitempty"` // custom (added) column data in results (like 340b_id value, etc). This is a CSV list.
	Seq  int64  `protobuf:"varint,13,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *ScrubRebate) Reset() {
	*x = ScrubRebate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubRebate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubRebate) ProtoMessage() {}

func (x *ScrubRebate) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubRebate.ProtoReflect.Descriptor instead.
func (*ScrubRebate) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *ScrubRebate) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *ScrubRebate) GetScid() int64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

func (x *ScrubRebate) GetIvid() int64 {
	if x != nil {
		return x.Ivid
	}
	return 0
}

func (x *ScrubRebate) GetRbid() int64 {
	if x != nil {
		return x.Rbid
	}
	return 0
}

func (x *ScrubRebate) GetStat() string {
	if x != nil {
		return x.Stat
	}
	return ""
}

func (x *ScrubRebate) GetSpmt() string {
	if x != nil {
		return x.Spmt
	}
	return ""
}

func (x *ScrubRebate) GetFprt() string {
	if x != nil {
		return x.Fprt
	}
	return ""
}

func (x *ScrubRebate) GetExcl() string {
	if x != nil {
		return x.Excl
	}
	return ""
}

func (x *ScrubRebate) GetErrc() string {
	if x != nil {
		return x.Errc
	}
	return ""
}

func (x *ScrubRebate) GetErrm() string {
	if x != nil {
		return x.Errm
	}
	return ""
}

func (x *ScrubRebate) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ScrubRebate) GetCust() string {
	if x != nil {
		return x.Cust
	}
	return ""
}

func (x *ScrubRebate) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type ScrubMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manu string `protobuf:"bytes,1,opt,name=manu,proto3" json:"manu,omitempty"`
	Scid int64  `protobuf:"varint,2,opt,name=scid,proto3" json:"scid,omitempty"`
	Ivid int64  `protobuf:"varint,3,opt,name=ivid,proto3" json:"ivid,omitempty"`
	Rbid int64  `protobuf:"varint,4,opt,name=rbid,proto3" json:"rbid,omitempty"`
	Clid string `protobuf:"bytes,5,opt,name=clid,proto3" json:"clid,omitempty"`
	Seq  int64  `protobuf:"varint,6,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *ScrubMatch) Reset() {
	*x = ScrubMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubMatch) ProtoMessage() {}

func (x *ScrubMatch) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubMatch.ProtoReflect.Descriptor instead.
func (*ScrubMatch) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *ScrubMatch) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *ScrubMatch) GetScid() int64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

func (x *ScrubMatch) GetIvid() int64 {
	if x != nil {
		return x.Ivid
	}
	return 0
}

func (x *ScrubMatch) GetRbid() int64 {
	if x != nil {
		return x.Rbid
	}
	return 0
}

func (x *ScrubMatch) GetClid() string {
	if x != nil {
		return x.Clid
	}
	return ""
}

func (x *ScrubMatch) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type ScrubAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manu string `protobuf:"bytes,1,opt,name=manu,proto3" json:"manu,omitempty"`
	Scid int64  `protobuf:"varint,2,opt,name=scid,proto3" json:"scid,omitempty"`
	Ivid int64  `protobuf:"varint,3,opt,name=ivid,proto3" json:"ivid,omitempty"`
	Rbid int64  `protobuf:"varint,4,opt,name=rbid,proto3" json:"rbid,omitempty"`
	Clid string `protobuf:"bytes,5,opt,name=clid,proto3" json:"clid,omitempty"`
	Excl string `protobuf:"bytes,6,opt,name=excl,proto3" json:"excl,omitempty"`
	Seq  int64  `protobuf:"varint,7,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *ScrubAttempt) Reset() {
	*x = ScrubAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubAttempt) ProtoMessage() {}

func (x *ScrubAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubAttempt.ProtoReflect.Descriptor instead.
func (*ScrubAttempt) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *ScrubAttempt) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *ScrubAttempt) GetScid() int64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

func (x *ScrubAttempt) GetIvid() int64 {
	if x != nil {
		return x.Ivid
	}
	return 0
}

func (x *ScrubAttempt) GetRbid() int64 {
	if x != nil {
		return x.Rbid
	}
	return 0
}

func (x *ScrubAttempt) GetClid() string {
	if x != nil {
		return x.Clid
	}
	return ""
}

func (x *ScrubAttempt) GetExcl() string {
	if x != nil {
		return x.Excl
	}
	return ""
}

func (x *ScrubAttempt) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type ScrubClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manu string `protobuf:"bytes,1,opt,name=manu,proto3" json:"manu,omitempty"`
	Scid int64  `protobuf:"varint,2,opt,name=scid,proto3" json:"scid,omitempty"`
	Clid string `protobuf:"bytes,3,opt,name=clid,proto3" json:"clid,omitempty"`
	Excl string `protobuf:"bytes,4,opt,name=excl,proto3" json:"excl,omitempty"`
	Seq  int64  `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *ScrubClaim) Reset() {
	*x = ScrubClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubClaim) ProtoMessage() {}

func (x *ScrubClaim) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubClaim.ProtoReflect.Descriptor instead.
func (*ScrubClaim) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *ScrubClaim) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *ScrubClaim) GetScid() int64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

func (x *ScrubClaim) GetClid() string {
	if x != nil {
		return x.Clid
	}
	return ""
}

func (x *ScrubClaim) GetExcl() string {
	if x != nil {
		return x.Excl
	}
	return ""
}

func (x *ScrubClaim) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type ScrubRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row string `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
}

func (x *ScrubRow) Reset() {
	*x = ScrubRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubRow) ProtoMessage() {}

func (x *ScrubRow) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubRow.ProtoReflect.Descriptor instead.
func (*ScrubRow) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{8}
}

func (x *ScrubRow) GetRow() string {
	if x != nil {
		return x.Row
	}
	return ""
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmid int64  `protobuf:"varint,1,opt,name=cmid,proto3" json:"cmid,omitempty"`
	Comd string `protobuf:"bytes,2,opt,name=comd,proto3" json:"comd,omitempty"` // GRPC service API call (endpoint/function name)
	Xou  string `protobuf:"bytes,3,opt,name=xou,proto3" json:"xou,omitempty"`
	Manu string `protobuf:"bytes,4,opt,name=manu,proto3" json:"manu,omitempty"`
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Kind string `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	Auth string `protobuf:"bytes,7,opt,name=auth,proto3" json:"auth,omitempty"`
	Vers string `protobuf:"bytes,8,opt,name=vers,proto3" json:"vers,omitempty"`
	Dscr string `protobuf:"bytes,9,opt,name=dscr,proto3" json:"dscr,omitempty"`
	Hash string `protobuf:"bytes,10,opt,name=hash,proto3" json:"hash,omitempty"`
	Netw string `protobuf:"bytes,11,opt,name=netw,proto3" json:"netw,omitempty"`
	Host string `protobuf:"bytes,12,opt,name=host,proto3" json:"host,omitempty"`
	User string `protobuf:"bytes,13,opt,name=user,proto3" json:"user,omitempty"`
	Addr string `protobuf:"bytes,14,opt,name=addr,proto3" json:"addr,omitempty"` // public address seen on incoming command
	Cmdl string `protobuf:"bytes,15,opt,name=cmdl,proto3" json:"cmdl,omitempty"`
	Cwd  string `protobuf:"bytes,16,opt,name=cwd,proto3" json:"cwd,omitempty"` // current working directory
	Rslt string `protobuf:"bytes,17,opt,name=rslt,proto3" json:"rslt,omitempty"`
	Crat int64  `protobuf:"varint,18,opt,name=crat,proto3" json:"crat,omitempty"`
	Seq  int64  `protobuf:"varint,19,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{9}
}

func (x *Command) GetCmid() int64 {
	if x != nil {
		return x.Cmid
	}
	return 0
}

func (x *Command) GetComd() string {
	if x != nil {
		return x.Comd
	}
	return ""
}

func (x *Command) GetXou() string {
	if x != nil {
		return x.Xou
	}
	return ""
}

func (x *Command) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *Command) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Command) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Command) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *Command) GetVers() string {
	if x != nil {
		return x.Vers
	}
	return ""
}

func (x *Command) GetDscr() string {
	if x != nil {
		return x.Dscr
	}
	return ""
}

func (x *Command) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Command) GetNetw() string {
	if x != nil {
		return x.Netw
	}
	return ""
}

func (x *Command) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Command) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Command) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Command) GetCmdl() string {
	if x != nil {
		return x.Cmdl
	}
	return ""
}

func (x *Command) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *Command) GetRslt() string {
	if x != nil {
		return x.Rslt
	}
	return ""
}

func (x *Command) GetCrat() int64 {
	if x != nil {
		return x.Crat
	}
	return 0
}

func (x *Command) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq   int64  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	I340  string `protobuf:"bytes,2,opt,name=i340,proto3" json:"i340,omitempty"`
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Strt  int64  `protobuf:"varint,4,opt,name=strt,proto3" json:"strt,omitempty"`
	Term  int64  `protobuf:"varint,5,opt,name=term,proto3" json:"term,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{10}
}

func (x *Entity) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Entity) GetI340() string {
	if x != nil {
		return x.I340
	}
	return ""
}

func (x *Entity) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Entity) GetStrt() int64 {
	if x != nil {
		return x.Strt
	}
	return 0
}

func (x *Entity) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

type Pharmacy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I340  string `protobuf:"bytes,1,opt,name=i340,proto3" json:"i340,omitempty"`
	Phid  string `protobuf:"bytes,2,opt,name=phid,proto3" json:"phid,omitempty"`
	Chnm  string `protobuf:"bytes,3,opt,name=chnm,proto3" json:"chnm,omitempty"`
	Ncps  string `protobuf:"bytes,4,opt,name=ncps,proto3" json:"ncps,omitempty"`
	Npis  string `protobuf:"bytes,5,opt,name=npis,proto3" json:"npis,omitempty"`
	Deas  string `protobuf:"bytes,6,opt,name=deas,proto3" json:"deas,omitempty"`
	State string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Seq   int64  `protobuf:"varint,8,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *Pharmacy) Reset() {
	*x = Pharmacy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pharmacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pharmacy) ProtoMessage() {}

func (x *Pharmacy) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pharmacy.ProtoReflect.Descriptor instead.
func (*Pharmacy) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{11}
}

func (x *Pharmacy) GetI340() string {
	if x != nil {
		return x.I340
	}
	return ""
}

func (x *Pharmacy) GetPhid() string {
	if x != nil {
		return x.Phid
	}
	return ""
}

func (x *Pharmacy) GetChnm() string {
	if x != nil {
		return x.Chnm
	}
	return ""
}

func (x *Pharmacy) GetNcps() string {
	if x != nil {
		return x.Ncps
	}
	return ""
}

func (x *Pharmacy) GetNpis() string {
	if x != nil {
		return x.Npis
	}
	return ""
}

func (x *Pharmacy) GetDeas() string {
	if x != nil {
		return x.Deas
	}
	return ""
}

func (x *Pharmacy) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Pharmacy) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type NDC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manu string `protobuf:"bytes,1,opt,name=manu,proto3" json:"manu,omitempty"`
	Ndc  string `protobuf:"bytes,2,opt,name=ndc,proto3" json:"ndc,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Netw string `protobuf:"bytes,4,opt,name=netw,proto3" json:"netw,omitempty"`
	Seq  int64  `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *NDC) Reset() {
	*x = NDC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NDC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NDC) ProtoMessage() {}

func (x *NDC) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NDC.ProtoReflect.Descriptor instead.
func (*NDC) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{12}
}

func (x *NDC) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *NDC) GetNdc() string {
	if x != nil {
		return x.Ndc
	}
	return ""
}

func (x *NDC) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NDC) GetNetw() string {
	if x != nil {
		return x.Netw
	}
	return ""
}

func (x *NDC) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type SPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ncp string `protobuf:"bytes,1,opt,name=ncp,proto3" json:"ncp,omitempty"`
	Npi string `protobuf:"bytes,2,opt,name=npi,proto3" json:"npi,omitempty"`
	Dea string `protobuf:"bytes,3,opt,name=dea,proto3" json:"dea,omitempty"`
	Sto string `protobuf:"bytes,4,opt,name=sto,proto3" json:"sto,omitempty"`
	Nam string `protobuf:"bytes,5,opt,name=nam,proto3" json:"nam,omitempty"`
	Lbn string `protobuf:"bytes,6,opt,name=lbn,proto3" json:"lbn,omitempty"`
	Chn string `protobuf:"bytes,7,opt,name=chn,proto3" json:"chn,omitempty"`
	Cde string `protobuf:"bytes,8,opt,name=cde,proto3" json:"cde,omitempty"` // NCPDP 340b status code
	Seq int64  `protobuf:"varint,9,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SPI) Reset() {
	*x = SPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPI) ProtoMessage() {}

func (x *SPI) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPI.ProtoReflect.Descriptor instead.
func (*SPI) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{13}
}

func (x *SPI) GetNcp() string {
	if x != nil {
		return x.Ncp
	}
	return ""
}

func (x *SPI) GetNpi() string {
	if x != nil {
		return x.Npi
	}
	return ""
}

func (x *SPI) GetDea() string {
	if x != nil {
		return x.Dea
	}
	return ""
}

func (x *SPI) GetSto() string {
	if x != nil {
		return x.Sto
	}
	return ""
}

func (x *SPI) GetNam() string {
	if x != nil {
		return x.Nam
	}
	return ""
}

func (x *SPI) GetLbn() string {
	if x != nil {
		return x.Lbn
	}
	return ""
}

func (x *SPI) GetChn() string {
	if x != nil {
		return x.Chn
	}
	return ""
}

func (x *SPI) GetCde() string {
	if x != nil {
		return x.Cde
	}
	return ""
}

func (x *SPI) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type Designation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manu string `protobuf:"bytes,1,opt,name=manu,proto3" json:"manu,omitempty"`
	I340 string `protobuf:"bytes,2,opt,name=i340,proto3" json:"i340,omitempty"`
	Flag string `protobuf:"bytes,4,opt,name=flag,proto3" json:"flag,omitempty"`
	Phid string `protobuf:"bytes,5,opt,name=phid,proto3" json:"phid,omitempty"`
	Assg bool   `protobuf:"varint,6,opt,name=assg,proto3" json:"assg,omitempty"`
	Term bool   `protobuf:"varint,7,opt,name=term,proto3" json:"term,omitempty"`
	Xdat int64  `protobuf:"varint,8,opt,name=xdat,proto3" json:"xdat,omitempty"` // expired_at
	Dlat int64  `protobuf:"varint,9,opt,name=dlat,proto3" json:"dlat,omitempty"`
	Xsat int64  `protobuf:"varint,10,opt,name=xsat,proto3" json:"xsat,omitempty"` // expires_at
	Crat int64  `protobuf:"varint,12,opt,name=crat,proto3" json:"crat,omitempty"` // created_at
	Cpat int64  `protobuf:"varint,13,opt,name=cpat,proto3" json:"cpat,omitempty"`
	Hin  string `protobuf:"bytes,14,opt,name=hin,proto3" json:"hin,omitempty"`
	Seq  int64  `protobuf:"varint,15,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *Designation) Reset() {
	*x = Designation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Designation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Designation) ProtoMessage() {}

func (x *Designation) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Designation.ProtoReflect.Descriptor instead.
func (*Designation) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{14}
}

func (x *Designation) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *Designation) GetI340() string {
	if x != nil {
		return x.I340
	}
	return ""
}

func (x *Designation) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *Designation) GetPhid() string {
	if x != nil {
		return x.Phid
	}
	return ""
}

func (x *Designation) GetAssg() bool {
	if x != nil {
		return x.Assg
	}
	return false
}

func (x *Designation) GetTerm() bool {
	if x != nil {
		return x.Term
	}
	return false
}

func (x *Designation) GetXdat() int64 {
	if x != nil {
		return x.Xdat
	}
	return 0
}

func (x *Designation) GetDlat() int64 {
	if x != nil {
		return x.Dlat
	}
	return 0
}

func (x *Designation) GetXsat() int64 {
	if x != nil {
		return x.Xsat
	}
	return 0
}

func (x *Designation) GetCrat() int64 {
	if x != nil {
		return x.Crat
	}
	return 0
}

func (x *Designation) GetCpat() int64 {
	if x != nil {
		return x.Cpat
	}
	return 0
}

func (x *Designation) GetHin() string {
	if x != nil {
		return x.Hin
	}
	return ""
}

func (x *Designation) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type LDN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manu string `protobuf:"bytes,1,opt,name=manu,proto3" json:"manu,omitempty"`
	Netw string `protobuf:"bytes,2,opt,name=netw,proto3" json:"netw,omitempty"`
	Phid string `protobuf:"bytes,3,opt,name=phid,proto3" json:"phid,omitempty"`
	Assg bool   `protobuf:"varint,4,opt,name=assg,proto3" json:"assg,omitempty"`
	Term bool   `protobuf:"varint,5,opt,name=term,proto3" json:"term,omitempty"`
	Seq  int64  `protobuf:"varint,6,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *LDN) Reset() {
	*x = LDN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LDN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDN) ProtoMessage() {}

func (x *LDN) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDN.ProtoReflect.Descriptor instead.
func (*LDN) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{15}
}

func (x *LDN) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *LDN) GetNetw() string {
	if x != nil {
		return x.Netw
	}
	return ""
}

func (x *LDN) GetPhid() string {
	if x != nil {
		return x.Phid
	}
	return ""
}

func (x *LDN) GetAssg() bool {
	if x != nil {
		return x.Assg
	}
	return false
}

func (x *LDN) GetTerm() bool {
	if x != nil {
		return x.Term
	}
	return false
}

func (x *LDN) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type ESP1PharmNDC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manu string `protobuf:"bytes,1,opt,name=manu,proto3" json:"manu,omitempty"`
	Spid string `protobuf:"bytes,2,opt,name=spid,proto3" json:"spid,omitempty"`
	Ndc  string `protobuf:"bytes,3,opt,name=ndc,proto3" json:"ndc,omitempty"`
	Strt int64  `protobuf:"varint,4,opt,name=strt,proto3" json:"strt,omitempty"`
	Term int64  `protobuf:"varint,5,opt,name=term,proto3" json:"term,omitempty"`
}

func (x *ESP1PharmNDC) Reset() {
	*x = ESP1PharmNDC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESP1PharmNDC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESP1PharmNDC) ProtoMessage() {}

func (x *ESP1PharmNDC) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESP1PharmNDC.ProtoReflect.Descriptor instead.
func (*ESP1PharmNDC) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{16}
}

func (x *ESP1PharmNDC) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *ESP1PharmNDC) GetSpid() string {
	if x != nil {
		return x.Spid
	}
	return ""
}

func (x *ESP1PharmNDC) GetNdc() string {
	if x != nil {
		return x.Ndc
	}
	return ""
}

func (x *ESP1PharmNDC) GetStrt() int64 {
	if x != nil {
		return x.Strt
	}
	return 0
}

func (x *ESP1PharmNDC) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

type Eligibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq  int64  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`   // id
	I340 string `protobuf:"bytes,2,opt,name=i340,proto3" json:"i340,omitempty"`  // id_340b
	Phid string `protobuf:"bytes,3,opt,name=phid,proto3" json:"phid,omitempty"`  // pharmacy_id
	Manu string `protobuf:"bytes,4,opt,name=manu,proto3" json:"manu,omitempty"`  // manufacturer
	Netw string `protobuf:"bytes,5,opt,name=netw,proto3" json:"netw,omitempty"`  // network
	Strt int64  `protobuf:"varint,6,opt,name=strt,proto3" json:"strt,omitempty"` // start_at
	Term int64  `protobuf:"varint,7,opt,name=term,proto3" json:"term,omitempty"` // end_at
}

func (x *Eligibility) Reset() {
	*x = Eligibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Eligibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Eligibility) ProtoMessage() {}

func (x *Eligibility) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Eligibility.ProtoReflect.Descriptor instead.
func (*Eligibility) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{17}
}

func (x *Eligibility) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Eligibility) GetI340() string {
	if x != nil {
		return x.I340
	}
	return ""
}

func (x *Eligibility) GetPhid() string {
	if x != nil {
		return x.Phid
	}
	return ""
}

func (x *Eligibility) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *Eligibility) GetNetw() string {
	if x != nil {
		return x.Netw
	}
	return ""
}

func (x *Eligibility) GetStrt() int64 {
	if x != nil {
		return x.Strt
	}
	return 0
}

func (x *Eligibility) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

type Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manu string `protobuf:"bytes,1,opt,name=manu,proto3" json:"manu,omitempty"`
	Proc string `protobuf:"bytes,2,opt,name=proc,proto3" json:"proc,omitempty"`
	Auth string `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	Kind string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Vers int64  `protobuf:"varint,5,opt,name=vers,proto3" json:"vers,omitempty"`
	Enb  bool   `protobuf:"varint,6,opt,name=enb,proto3" json:"enb,omitempty"`
}

func (x *Auth) Reset() {
	*x = Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{18}
}

func (x *Auth) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *Auth) GetProc() string {
	if x != nil {
		return x.Proc
	}
	return ""
}

func (x *Auth) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *Auth) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Auth) GetVers() int64 {
	if x != nil {
		return x.Vers
	}
	return 0
}

func (x *Auth) GetEnb() bool {
	if x != nil {
		return x.Enb
	}
	return false
}

type Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Req) Reset() {
	*x = Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{19}
}

type Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Res) Reset() {
	*x = Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res) ProtoMessage() {}

func (x *Res) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res.ProtoReflect.Descriptor instead.
func (*Res) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{20}
}

type SyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Last int64 `protobuf:"varint,1,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *SyncReq) Reset() {
	*x = SyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncReq) ProtoMessage() {}

func (x *SyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncReq.ProtoReflect.Descriptor instead.
func (*SyncReq) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{21}
}

func (x *SyncReq) GetLast() int64 {
	if x != nil {
		return x.Last
	}
	return 0
}

type InvoiceIdent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manu string `protobuf:"bytes,1,opt,name=manu,proto3" json:"manu,omitempty"`
	Ivid int64  `protobuf:"varint,2,opt,name=ivid,proto3" json:"ivid,omitempty"`
}

func (x *InvoiceIdent) Reset() {
	*x = InvoiceIdent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceIdent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceIdent) ProtoMessage() {}

func (x *InvoiceIdent) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceIdent.ProtoReflect.Descriptor instead.
func (*InvoiceIdent) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{22}
}

func (x *InvoiceIdent) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *InvoiceIdent) GetIvid() int64 {
	if x != nil {
		return x.Ivid
	}
	return 0
}

type ScrubRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scid int64 `protobuf:"varint,1,opt,name=scid,proto3" json:"scid,omitempty"`
}

func (x *ScrubRes) Reset() {
	*x = ScrubRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubRes) ProtoMessage() {}

func (x *ScrubRes) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubRes.ProtoReflect.Descriptor instead.
func (*ScrubRes) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{23}
}

func (x *ScrubRes) GetScid() int64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

type ScrubIdent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manu string `protobuf:"bytes,1,opt,name=manu,proto3" json:"manu,omitempty"`
	Scid int64  `protobuf:"varint,2,opt,name=scid,proto3" json:"scid,omitempty"`
}

func (x *ScrubIdent) Reset() {
	*x = ScrubIdent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubIdent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubIdent) ProtoMessage() {}

func (x *ScrubIdent) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubIdent.ProtoReflect.Descriptor instead.
func (*ScrubIdent) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{24}
}

func (x *ScrubIdent) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *ScrubIdent) GetScid() int64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

type Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manu              string `protobuf:"bytes,1,opt,name=manu,proto3" json:"manu,omitempty"`
	Scid              int64  `protobuf:"varint,2,opt,name=scid,proto3" json:"scid,omitempty"`
	Ivid              int64  `protobuf:"varint,3,opt,name=ivid,proto3" json:"ivid,omitempty"`
	RbtTotal          int32  `protobuf:"varint,4,opt,name=rbt_total,json=rbtTotal,proto3" json:"rbt_total,omitempty"`
	RbtValid          int32  `protobuf:"varint,5,opt,name=rbt_valid,json=rbtValid,proto3" json:"rbt_valid,omitempty"`
	RbtMatched        int32  `protobuf:"varint,6,opt,name=rbt_matched,json=rbtMatched,proto3" json:"rbt_matched,omitempty"`
	RbtNomatch        int32  `protobuf:"varint,7,opt,name=rbt_nomatch,json=rbtNomatch,proto3" json:"rbt_nomatch,omitempty"`
	RbtInvalid        int32  `protobuf:"varint,8,opt,name=rbt_invalid,json=rbtInvalid,proto3" json:"rbt_invalid,omitempty"`
	RbtPassed         int32  `protobuf:"varint,9,opt,name=rbt_passed,json=rbtPassed,proto3" json:"rbt_passed,omitempty"`
	RbtFailed         int32  `protobuf:"varint,10,opt,name=rbt_failed,json=rbtFailed,proto3" json:"rbt_failed,omitempty"`
	ClmTotal          int32  `protobuf:"varint,11,opt,name=clm_total,json=clmTotal,proto3" json:"clm_total,omitempty"`
	ClmValid          int32  `protobuf:"varint,12,opt,name=clm_valid,json=clmValid,proto3" json:"clm_valid,omitempty"`
	ClmMatched        int32  `protobuf:"varint,13,opt,name=clm_matched,json=clmMatched,proto3" json:"clm_matched,omitempty"`
	ClmNomatch        int32  `protobuf:"varint,14,opt,name=clm_nomatch,json=clmNomatch,proto3" json:"clm_nomatch,omitempty"`
	ClmInvalid        int32  `protobuf:"varint,15,opt,name=clm_invalid,json=clmInvalid,proto3" json:"clm_invalid,omitempty"`
	SpiExact          int32  `protobuf:"varint,16,opt,name=spi_exact,json=spiExact,proto3" json:"spi_exact,omitempty"`
	SpiCross          int32  `protobuf:"varint,17,opt,name=spi_cross,json=spiCross,proto3" json:"spi_cross,omitempty"`
	SpiStack          int32  `protobuf:"varint,18,opt,name=spi_stack,json=spiStack,proto3" json:"spi_stack,omitempty"`
	SpiChain          int32  `protobuf:"varint,19,opt,name=spi_chain,json=spiChain,proto3" json:"spi_chain,omitempty"`
	DosEquDoc         int32  `protobuf:"varint,20,opt,name=dos_equ_doc,json=dosEquDoc,proto3" json:"dos_equ_doc,omitempty"`
	DosBefDoc         int32  `protobuf:"varint,21,opt,name=dos_bef_doc,json=dosBefDoc,proto3" json:"dos_bef_doc,omitempty"`
	DosAftDoc         int32  `protobuf:"varint,22,opt,name=dos_aft_doc,json=dosAftDoc,proto3" json:"dos_aft_doc,omitempty"`
	DosEquDof         int32  `protobuf:"varint,23,opt,name=dos_equ_dof,json=dosEquDof,proto3" json:"dos_equ_dof,omitempty"`
	DosBefDof         int32  `protobuf:"varint,24,opt,name=dos_bef_dof,json=dosBefDof,proto3" json:"dos_bef_dof,omitempty"`
	DosAftDof         int32  `protobuf:"varint,25,opt,name=dos_aft_dof,json=dosAftDof,proto3" json:"dos_aft_dof,omitempty"`
	DosRangePass      int32  `protobuf:"varint,26,opt,name=dos_range_pass,json=dosRangePass,proto3" json:"dos_range_pass,omitempty"`
	DosRangeFail      int32  `protobuf:"varint,27,opt,name=dos_range_fail,json=dosRangeFail,proto3" json:"dos_range_fail,omitempty"`
	DofRangePass      int32  `protobuf:"varint,28,opt,name=dof_range_pass,json=dofRangePass,proto3" json:"dof_range_pass,omitempty"`
	DofRangeFail      int32  `protobuf:"varint,29,opt,name=dof_range_fail,json=dofRangeFail,proto3" json:"dof_range_fail,omitempty"`
	DocRangePass      int32  `protobuf:"varint,30,opt,name=doc_range_pass,json=docRangePass,proto3" json:"doc_range_pass,omitempty"`
	DocRangeFail      int32  `protobuf:"varint,31,opt,name=doc_range_fail,json=docRangeFail,proto3" json:"doc_range_fail,omitempty"`
	RNoMatchRx        int32  `protobuf:"varint,32,opt,name=r_no_match_rx,json=rNoMatchRx,proto3" json:"r_no_match_rx,omitempty"`
	RNoMatchSpi       int32  `protobuf:"varint,33,opt,name=r_no_match_spi,json=rNoMatchSpi,proto3" json:"r_no_match_spi,omitempty"`
	RNoMatchNdc       int32  `protobuf:"varint,34,opt,name=r_no_match_ndc,json=rNoMatchNdc,proto3" json:"r_no_match_ndc,omitempty"`
	RClmUsed          int32  `protobuf:"varint,35,opt,name=r_clm_used,json=rClmUsed,proto3" json:"r_clm_used,omitempty"`
	RDosRbtAftClm     int32  `protobuf:"varint,36,opt,name=r_dos_rbt_aft_clm,json=rDosRbtAftClm,proto3" json:"r_dos_rbt_aft_clm,omitempty"`
	RDosClmAftRbt     int32  `protobuf:"varint,37,opt,name=r_dos_clm_aft_rbt,json=rDosClmAftRbt,proto3" json:"r_dos_clm_aft_rbt,omitempty"`
	ROldRbtNewClm     int32  `protobuf:"varint,38,opt,name=r_old_rbt_new_clm,json=rOldRbtNewClm,proto3" json:"r_old_rbt_new_clm,omitempty"`
	RNewRbtOldClm     int32  `protobuf:"varint,39,opt,name=r_new_rbt_old_clm,json=rNewRbtOldClm,proto3" json:"r_new_rbt_old_clm,omitempty"`
	RClmNotCnfm       int32  `protobuf:"varint,40,opt,name=r_clm_not_cnfm,json=rClmNotCnfm,proto3" json:"r_clm_not_cnfm,omitempty"`
	RPhmNotDesg       int32  `protobuf:"varint,41,opt,name=r_phm_not_desg,json=rPhmNotDesg,proto3" json:"r_phm_not_desg,omitempty"`
	RInvDesgType      int32  `protobuf:"varint,42,opt,name=r_inv_desg_type,json=rInvDesgType,proto3" json:"r_inv_desg_type,omitempty"`
	RWrongNetwork     int32  `protobuf:"varint,43,opt,name=r_wrong_network,json=rWrongNetwork,proto3" json:"r_wrong_network,omitempty"`
	RNotEligAtSub     int32  `protobuf:"varint,44,opt,name=r_not_elig_at_sub,json=rNotEligAtSub,proto3" json:"r_not_elig_at_sub,omitempty"`
	LoadRebates       int64  `protobuf:"varint,45,opt,name=load_rebates,json=loadRebates,proto3" json:"load_rebates,omitempty"`
	PrepClaims        int64  `protobuf:"varint,46,opt,name=prep_claims,json=prepClaims,proto3" json:"prep_claims,omitempty"`
	PullRebates       int64  `protobuf:"varint,47,opt,name=pull_rebates,json=pullRebates,proto3" json:"pull_rebates,omitempty"`
	WorkRebates       int64  `protobuf:"varint,48,opt,name=work_rebates,json=workRebates,proto3" json:"work_rebates,omitempty"`
	SaveRebates       int64  `protobuf:"varint,49,opt,name=save_rebates,json=saveRebates,proto3" json:"save_rebates,omitempty"`
	SaveScrubRebates  int64  `protobuf:"varint,50,opt,name=save_scrub_rebates,json=saveScrubRebates,proto3" json:"save_scrub_rebates,omitempty"`
	SaveScrubMatches  int64  `protobuf:"varint,51,opt,name=save_scrub_matches,json=saveScrubMatches,proto3" json:"save_scrub_matches,omitempty"`
	SaveScrubAttempts int64  `protobuf:"varint,52,opt,name=save_scrub_attempts,json=saveScrubAttempts,proto3" json:"save_scrub_attempts,omitempty"`
	SaveScrubClaims   int64  `protobuf:"varint,53,opt,name=save_scrub_claims,json=saveScrubClaims,proto3" json:"save_scrub_claims,omitempty"`
	Seq               int64  `protobuf:"varint,54,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{25}
}

func (x *Metrics) GetManu() string {
	if x != nil {
		return x.Manu
	}
	return ""
}

func (x *Metrics) GetScid() int64 {
	if x != nil {
		return x.Scid
	}
	return 0
}

func (x *Metrics) GetIvid() int64 {
	if x != nil {
		return x.Ivid
	}
	return 0
}

func (x *Metrics) GetRbtTotal() int32 {
	if x != nil {
		return x.RbtTotal
	}
	return 0
}

func (x *Metrics) GetRbtValid() int32 {
	if x != nil {
		return x.RbtValid
	}
	return 0
}

func (x *Metrics) GetRbtMatched() int32 {
	if x != nil {
		return x.RbtMatched
	}
	return 0
}

func (x *Metrics) GetRbtNomatch() int32 {
	if x != nil {
		return x.RbtNomatch
	}
	return 0
}

func (x *Metrics) GetRbtInvalid() int32 {
	if x != nil {
		return x.RbtInvalid
	}
	return 0
}

func (x *Metrics) GetRbtPassed() int32 {
	if x != nil {
		return x.RbtPassed
	}
	return 0
}

func (x *Metrics) GetRbtFailed() int32 {
	if x != nil {
		return x.RbtFailed
	}
	return 0
}

func (x *Metrics) GetClmTotal() int32 {
	if x != nil {
		return x.ClmTotal
	}
	return 0
}

func (x *Metrics) GetClmValid() int32 {
	if x != nil {
		return x.ClmValid
	}
	return 0
}

func (x *Metrics) GetClmMatched() int32 {
	if x != nil {
		return x.ClmMatched
	}
	return 0
}

func (x *Metrics) GetClmNomatch() int32 {
	if x != nil {
		return x.ClmNomatch
	}
	return 0
}

func (x *Metrics) GetClmInvalid() int32 {
	if x != nil {
		return x.ClmInvalid
	}
	return 0
}

func (x *Metrics) GetSpiExact() int32 {
	if x != nil {
		return x.SpiExact
	}
	return 0
}

func (x *Metrics) GetSpiCross() int32 {
	if x != nil {
		return x.SpiCross
	}
	return 0
}

func (x *Metrics) GetSpiStack() int32 {
	if x != nil {
		return x.SpiStack
	}
	return 0
}

func (x *Metrics) GetSpiChain() int32 {
	if x != nil {
		return x.SpiChain
	}
	return 0
}

func (x *Metrics) GetDosEquDoc() int32 {
	if x != nil {
		return x.DosEquDoc
	}
	return 0
}

func (x *Metrics) GetDosBefDoc() int32 {
	if x != nil {
		return x.DosBefDoc
	}
	return 0
}

func (x *Metrics) GetDosAftDoc() int32 {
	if x != nil {
		return x.DosAftDoc
	}
	return 0
}

func (x *Metrics) GetDosEquDof() int32 {
	if x != nil {
		return x.DosEquDof
	}
	return 0
}

func (x *Metrics) GetDosBefDof() int32 {
	if x != nil {
		return x.DosBefDof
	}
	return 0
}

func (x *Metrics) GetDosAftDof() int32 {
	if x != nil {
		return x.DosAftDof
	}
	return 0
}

func (x *Metrics) GetDosRangePass() int32 {
	if x != nil {
		return x.DosRangePass
	}
	return 0
}

func (x *Metrics) GetDosRangeFail() int32 {
	if x != nil {
		return x.DosRangeFail
	}
	return 0
}

func (x *Metrics) GetDofRangePass() int32 {
	if x != nil {
		return x.DofRangePass
	}
	return 0
}

func (x *Metrics) GetDofRangeFail() int32 {
	if x != nil {
		return x.DofRangeFail
	}
	return 0
}

func (x *Metrics) GetDocRangePass() int32 {
	if x != nil {
		return x.DocRangePass
	}
	return 0
}

func (x *Metrics) GetDocRangeFail() int32 {
	if x != nil {
		return x.DocRangeFail
	}
	return 0
}

func (x *Metrics) GetRNoMatchRx() int32 {
	if x != nil {
		return x.RNoMatchRx
	}
	return 0
}

func (x *Metrics) GetRNoMatchSpi() int32 {
	if x != nil {
		return x.RNoMatchSpi
	}
	return 0
}

func (x *Metrics) GetRNoMatchNdc() int32 {
	if x != nil {
		return x.RNoMatchNdc
	}
	return 0
}

func (x *Metrics) GetRClmUsed() int32 {
	if x != nil {
		return x.RClmUsed
	}
	return 0
}

func (x *Metrics) GetRDosRbtAftClm() int32 {
	if x != nil {
		return x.RDosRbtAftClm
	}
	return 0
}

func (x *Metrics) GetRDosClmAftRbt() int32 {
	if x != nil {
		return x.RDosClmAftRbt
	}
	return 0
}

func (x *Metrics) GetROldRbtNewClm() int32 {
	if x != nil {
		return x.ROldRbtNewClm
	}
	return 0
}

func (x *Metrics) GetRNewRbtOldClm() int32 {
	if x != nil {
		return x.RNewRbtOldClm
	}
	return 0
}

func (x *Metrics) GetRClmNotCnfm() int32 {
	if x != nil {
		return x.RClmNotCnfm
	}
	return 0
}

func (x *Metrics) GetRPhmNotDesg() int32 {
	if x != nil {
		return x.RPhmNotDesg
	}
	return 0
}

func (x *Metrics) GetRInvDesgType() int32 {
	if x != nil {
		return x.RInvDesgType
	}
	return 0
}

func (x *Metrics) GetRWrongNetwork() int32 {
	if x != nil {
		return x.RWrongNetwork
	}
	return 0
}

func (x *Metrics) GetRNotEligAtSub() int32 {
	if x != nil {
		return x.RNotEligAtSub
	}
	return 0
}

func (x *Metrics) GetLoadRebates() int64 {
	if x != nil {
		return x.LoadRebates
	}
	return 0
}

func (x *Metrics) GetPrepClaims() int64 {
	if x != nil {
		return x.PrepClaims
	}
	return 0
}

func (x *Metrics) GetPullRebates() int64 {
	if x != nil {
		return x.PullRebates
	}
	return 0
}

func (x *Metrics) GetWorkRebates() int64 {
	if x != nil {
		return x.WorkRebates
	}
	return 0
}

func (x *Metrics) GetSaveRebates() int64 {
	if x != nil {
		return x.SaveRebates
	}
	return 0
}

func (x *Metrics) GetSaveScrubRebates() int64 {
	if x != nil {
		return x.SaveScrubRebates
	}
	return 0
}

func (x *Metrics) GetSaveScrubMatches() int64 {
	if x != nil {
		return x.SaveScrubMatches
	}
	return 0
}

func (x *Metrics) GetSaveScrubAttempts() int64 {
	if x != nil {
		return x.SaveScrubAttempts
	}
	return 0
}

func (x *Metrics) GetSaveScrubClaims() int64 {
	if x != nil {
		return x.SaveScrubClaims
	}
	return 0
}

func (x *Metrics) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type TestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claims     []*Claim        `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims,omitempty"`
	Entities   []*Entity       `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"`
	Pharmacies []*Pharmacy     `protobuf:"bytes,3,rep,name=pharmacies,proto3" json:"pharmacies,omitempty"`
	Ndcs       []*NDC          `protobuf:"bytes,4,rep,name=ndcs,proto3" json:"ndcs,omitempty"`
	Spis       []*SPI          `protobuf:"bytes,5,rep,name=spis,proto3" json:"spis,omitempty"`
	Desigs     []*Designation  `protobuf:"bytes,6,rep,name=desigs,proto3" json:"desigs,omitempty"`
	Ldns       []*LDN          `protobuf:"bytes,7,rep,name=ldns,proto3" json:"ldns,omitempty"`
	Esp1       []*ESP1PharmNDC `protobuf:"bytes,8,rep,name=esp1,proto3" json:"esp1,omitempty"`
	Ledger     []*Eligibility  `protobuf:"bytes,9,rep,name=ledger,proto3" json:"ledger,omitempty"`
	Name       string          `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TestData) Reset() {
	*x = TestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestData) ProtoMessage() {}

func (x *TestData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestData.ProtoReflect.Descriptor instead.
func (*TestData) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{26}
}

func (x *TestData) GetClaims() []*Claim {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *TestData) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *TestData) GetPharmacies() []*Pharmacy {
	if x != nil {
		return x.Pharmacies
	}
	return nil
}

func (x *TestData) GetNdcs() []*NDC {
	if x != nil {
		return x.Ndcs
	}
	return nil
}

func (x *TestData) GetSpis() []*SPI {
	if x != nil {
		return x.Spis
	}
	return nil
}

func (x *TestData) GetDesigs() []*Designation {
	if x != nil {
		return x.Desigs
	}
	return nil
}

func (x *TestData) GetLdns() []*LDN {
	if x != nil {
		return x.Ldns
	}
	return nil
}

func (x *TestData) GetEsp1() []*ESP1PharmNDC {
	if x != nil {
		return x.Esp1
	}
	return nil
}

func (x *TestData) GetLedger() []*Eligibility {
	if x != nil {
		return x.Ledger
	}
	return nil
}

func (x *TestData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_grpc_proto protoreflect.FileDescriptor

var file_grpc_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0x81, 0x03, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x76,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x6f, 0x75, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x78, 0x6f, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x75,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x73, 0x63, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x73, 0x63, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x74, 0x77, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x74, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6d, 0x64, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6d, 0x64, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x77, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x64, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x64,
	0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x72, 0x61, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x69, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x62, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x64, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x64, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x78, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x78, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x72, 0x78, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72, 0x78,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x64, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x64, 0x6f, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x22, 0x89, 0x02, 0x0a, 0x05, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6d, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x6e, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e,
	0x75, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6c, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x66, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x75, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x75, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x72, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x64, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x64, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x72, 0x61,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x72, 0x61, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x6e, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x6e, 0x61,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x22, 0xb3, 0x03, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6c, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x33, 0x34, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x33, 0x34, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x64, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6e, 0x64, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x72, 0x78, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x72, 0x78, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x66, 0x72, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x66, 0x72, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x64, 0x6f, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x64, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x64, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x64, 0x6f, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x6f,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x64, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x64, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x74, 0x77, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x74, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6e,
	0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x6e, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x68, 0x6e, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x68, 0x6e,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6c, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x65, 0x6c, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x73, 0x70, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x75, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6e, 0x66,
	0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x6e, 0x66, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x71, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x68, 0x70, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x68, 0x70, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x8f, 0x02, 0x0a, 0x0b, 0x53, 0x63,
	0x72, 0x75, 0x62, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x63, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x76, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x69, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x62, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x62, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x70, 0x6d, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x6d,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x70, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x70, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x63, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x63, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x72, 0x72,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x72, 0x72, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x72, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x72, 0x72,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x75, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x75, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x82, 0x01, 0x0a, 0x0a,
	0x53, 0x63, 0x72, 0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x6e, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x63,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x76, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x69, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x62, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x62, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6c,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6c, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71,
	0x22, 0x98, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x75, 0x62, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x61, 0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x76, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x62, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x62, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6c, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x63, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x63, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x6e, 0x0a, 0x0a, 0x53,
	0x63, 0x72, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x63, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6c, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x63, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x63, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x1c, 0x0a, 0x08, 0x53,
	0x63, 0x72, 0x75, 0x62, 0x52, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0xff, 0x02, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x78, 0x6f, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x78, 0x6f, 0x75, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x61, 0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x73, 0x63, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x65, 0x74, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x74, 0x77, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6d, 0x64, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6d, 0x64, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x77,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x6c, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x73, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x61, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x72, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x6c, 0x0a, 0x06, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x33, 0x34, 0x30, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x33, 0x34, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x74, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22, 0xaa, 0x01, 0x0a, 0x08, 0x50, 0x68,
	0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x33, 0x34, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x33, 0x34, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x68,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x68, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x68, 0x6e, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x68,
	0x6e, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x63, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x63, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x70, 0x69, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x70, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x61, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x65, 0x0a, 0x03, 0x4e, 0x44, 0x43, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x6e, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e,
	0x75, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x64, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6e, 0x64, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x74, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x74, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0xa7, 0x01,
	0x0a, 0x03, 0x53, 0x50, 0x49, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6e, 0x63, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x70, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x70, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x61, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x62, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x62,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x68, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x68, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x8d, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x33, 0x34, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x33, 0x34, 0x30, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x68, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x68, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x73, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x61, 0x73, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x78, 0x64, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x78,
	0x64, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6c, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x64, 0x6c, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x73, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x78, 0x73, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x72, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x72, 0x61, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x70, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x70, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x68, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x7b, 0x0a, 0x03, 0x4c, 0x44, 0x4e, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61,
	0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x74, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x65, 0x74, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x68, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x68, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x61, 0x73, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x73, 0x65, 0x71, 0x22, 0x70, 0x0a, 0x0c, 0x45, 0x53, 0x50, 0x31, 0x50, 0x68, 0x61, 0x72,
	0x6d, 0x4e, 0x44, 0x43, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x64, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x64, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x74, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x74,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x33, 0x34, 0x30,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x33, 0x34, 0x30, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x68, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x68, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x61, 0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x74, 0x77, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x74, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x74, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x22, 0x7c, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x72, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x76, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x6e, 0x62, 0x22, 0x05,
	0x0a, 0x03, 0x52, 0x65, 0x71, 0x22, 0x05, 0x0a, 0x03, 0x52, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x07,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x0c, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x6e, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69,
	0x76, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x08, 0x53, 0x63, 0x72, 0x75, 0x62, 0x52, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x63, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x75, 0x62, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x61, 0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x63, 0x69, 0x64, 0x22, 0xc2, 0x0e, 0x0a, 0x07, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x63, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x76, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x76, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x62, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x62, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x62, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x62, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x62, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x62, 0x74, 0x5f, 0x6e, 0x6f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x62, 0x74, 0x4e, 0x6f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x62, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x62, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x62, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x62, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x62, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x62, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x6c, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c,
	0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6d, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x6d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6d, 0x5f, 0x6e,
	0x6f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c,
	0x6d, 0x4e, 0x6f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6d, 0x5f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x6c, 0x6d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69,
	0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x70,
	0x69, 0x45, 0x78, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x5f, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x70, 0x69, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x70, 0x69, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x70, 0x69, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a,
	0x0b, 0x64, 0x6f, 0x73, 0x5f, 0x65, 0x71, 0x75, 0x5f, 0x64, 0x6f, 0x63, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x73, 0x45, 0x71, 0x75, 0x44, 0x6f, 0x63, 0x12, 0x1e, 0x0a,
	0x0b, 0x64, 0x6f, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x5f, 0x64, 0x6f, 0x63, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x73, 0x42, 0x65, 0x66, 0x44, 0x6f, 0x63, 0x12, 0x1e, 0x0a,
	0x0b, 0x64, 0x6f, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x73, 0x41, 0x66, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x1e, 0x0a,
	0x0b, 0x64, 0x6f, 0x73, 0x5f, 0x65, 0x71, 0x75, 0x5f, 0x64, 0x6f, 0x66, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x73, 0x45, 0x71, 0x75, 0x44, 0x6f, 0x66, 0x12, 0x1e, 0x0a,
	0x0b, 0x64, 0x6f, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x5f, 0x64, 0x6f, 0x66, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x73, 0x42, 0x65, 0x66, 0x44, 0x6f, 0x66, 0x12, 0x1e, 0x0a,
	0x0b, 0x64, 0x6f, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x5f, 0x64, 0x6f, 0x66, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x73, 0x41, 0x66, 0x74, 0x44, 0x6f, 0x66, 0x12, 0x24, 0x0a,
	0x0e, 0x64, 0x6f, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x6f, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6f, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x6f, 0x73,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6f, 0x66,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x64, 0x6f, 0x66, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x64, 0x6f, 0x66, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x6f, 0x66, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64,
	0x6f, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x64,
	0x6f, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x12, 0x21, 0x0a, 0x0d, 0x72, 0x5f, 0x6e, 0x6f, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x72, 0x78, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x4e, 0x6f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x78, 0x12, 0x23, 0x0a, 0x0e, 0x72, 0x5f, 0x6e, 0x6f, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x4e,
	0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x69, 0x12, 0x23, 0x0a, 0x0e, 0x72, 0x5f, 0x6e,
	0x6f, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x64, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x4e, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x64, 0x63, 0x12, 0x1c,
	0x0a, 0x0a, 0x72, 0x5f, 0x63, 0x6c, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x43, 0x6c, 0x6d, 0x55, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x11,
	0x72, 0x5f, 0x64, 0x6f, 0x73, 0x5f, 0x72, 0x62, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6c,
	0x6d, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x44, 0x6f, 0x73, 0x52, 0x62, 0x74,
	0x41, 0x66, 0x74, 0x43, 0x6c, 0x6d, 0x12, 0x28, 0x0a, 0x11, 0x72, 0x5f, 0x64, 0x6f, 0x73, 0x5f,
	0x63, 0x6c, 0x6d, 0x5f, 0x61, 0x66, 0x74, 0x5f, 0x72, 0x62, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x72, 0x44, 0x6f, 0x73, 0x43, 0x6c, 0x6d, 0x41, 0x66, 0x74, 0x52, 0x62, 0x74,
	0x12, 0x28, 0x0a, 0x11, 0x72, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x62, 0x74, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x6c, 0x6d, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x4f, 0x6c,
	0x64, 0x52, 0x62, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x6d, 0x12, 0x28, 0x0a, 0x11, 0x72, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x72, 0x62, 0x74, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x6d, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x4e, 0x65, 0x77, 0x52, 0x62, 0x74, 0x4f, 0x6c,
	0x64, 0x43, 0x6c, 0x6d, 0x12, 0x23, 0x0a, 0x0e, 0x72, 0x5f, 0x63, 0x6c, 0x6d, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x63, 0x6e, 0x66, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x43,
	0x6c, 0x6d, 0x4e, 0x6f, 0x74, 0x43, 0x6e, 0x66, 0x6d, 0x12, 0x23, 0x0a, 0x0e, 0x72, 0x5f, 0x70,
	0x68, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x50, 0x68, 0x6d, 0x4e, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x67, 0x12, 0x25,
	0x0a, 0x0f, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x5f, 0x64, 0x65, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x49, 0x6e, 0x76, 0x44, 0x65, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x5f, 0x77, 0x72, 0x6f, 0x6e, 0x67,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x28, 0x0a,
	0x11, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x5f, 0x61, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x6c,
	0x69, 0x67, 0x41, 0x74, 0x53, 0x75, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x73, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x52, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x72,
	0x75, 0x62, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x73, 0x61, 0x76, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x52, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x73, 0x61, 0x76, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73,
	0x61, 0x76, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x61, 0x76,
	0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x71, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0xf8,
	0x02, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x06, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x12, 0x28, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x68,
	0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x52, 0x0a,
	0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x64,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x4e, 0x44, 0x43, 0x52, 0x04, 0x6e, 0x64, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x70, 0x69,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53,
	0x50, 0x49, 0x52, 0x04, 0x73, 0x70, 0x69, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x04, 0x6c, 0x64, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x44, 0x4e, 0x52, 0x04, 0x6c, 0x64,
	0x6e, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x65, 0x73, 0x70, 0x31, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x53, 0x50, 0x31, 0x50, 0x68, 0x61, 0x72,
	0x6d, 0x4e, 0x44, 0x43, 0x52, 0x04, 0x65, 0x73, 0x70, 0x31, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x06, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xa8, 0x04, 0x0a, 0x05, 0x41, 0x74,
	0x6c, 0x61, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x09, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x28,
	0x01, 0x12, 0x31, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x12, 0x12, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72,
	0x75, 0x62, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x1a, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x63,
	0x72, 0x75, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x72, 0x75, 0x62, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x1a, 0x11,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x52, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x72,
	0x75, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53,
	0x63, 0x72, 0x75, 0x62, 0x52, 0x6f, 0x77, 0x22, 0x00, 0x30, 0x01, 0x12, 0x31, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x29, 0x0a, 0x0a, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x32, 0xe9, 0x06, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x12, 0x1e,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2b,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x0d, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0x00, 0x30, 0x01, 0x12, 0x27, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x53, 0x50, 0x49, 0x73, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x50, 0x49,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x27, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x44, 0x43, 0x73, 0x12,
	0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x09,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x44, 0x43, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2e, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x0d, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x32, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x12, 0x0d,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x36, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x53, 0x50, 0x31, 0x50, 0x68, 0x61, 0x72,
	0x6d, 0x73, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x53, 0x50, 0x31, 0x50, 0x68, 0x61,
	0x72, 0x6d, 0x4e, 0x44, 0x43, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71,
	0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x29, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x73, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x37, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x27, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4c, 0x44, 0x4e, 0x73, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x44, 0x4e,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x2c, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x28, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x63, 0x72, 0x75, 0x62, 0x73,
	0x12, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x1a, 0x09, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x28, 0x01, 0x12, 0x2b, 0x0a, 0x0b,
	0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x0d, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x28, 0x01, 0x12, 0x34, 0x0a, 0x10, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x63, 0x72, 0x75, 0x62, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x73, 0x12, 0x11, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x32, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x63, 0x72, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x63, 0x72, 0x75, 0x62,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53,
	0x63, 0x72, 0x75, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x28, 0x01, 0x12, 0x36, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x63, 0x72, 0x75, 0x62, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x12, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x28, 0x01,
	0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2d, 0x76, 0x35, 0x2f, 0x6d, 0x61,
	0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_proto_rawDescOnce sync.Once
	file_grpc_proto_rawDescData = file_grpc_proto_rawDesc
)

func file_grpc_proto_rawDescGZIP() []byte {
	file_grpc_proto_rawDescOnce.Do(func() {
		file_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_proto_rawDescData)
	})
	return file_grpc_proto_rawDescData
}

var file_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_grpc_proto_goTypes = []any{
	(*Invoice)(nil),      // 0: main.Invoice
	(*Rebate)(nil),       // 1: main.Rebate
	(*Scrub)(nil),        // 2: main.Scrub
	(*Claim)(nil),        // 3: main.Claim
	(*ScrubRebate)(nil),  // 4: main.ScrubRebate
	(*ScrubMatch)(nil),   // 5: main.ScrubMatch
	(*ScrubAttempt)(nil), // 6: main.ScrubAttempt
	(*ScrubClaim)(nil),   // 7: main.ScrubClaim
	(*ScrubRow)(nil),     // 8: main.ScrubRow
	(*Command)(nil),      // 9: main.Command
	(*Entity)(nil),       // 10: main.Entity
	(*Pharmacy)(nil),     // 11: main.Pharmacy
	(*NDC)(nil),          // 12: main.NDC
	(*SPI)(nil),          // 13: main.SPI
	(*Designation)(nil),  // 14: main.Designation
	(*LDN)(nil),          // 15: main.LDN
	(*ESP1PharmNDC)(nil), // 16: main.ESP1PharmNDC
	(*Eligibility)(nil),  // 17: main.Eligibility
	(*Auth)(nil),         // 18: main.Auth
	(*Req)(nil),          // 19: main.Req
	(*Res)(nil),          // 20: main.Res
	(*SyncReq)(nil),      // 21: main.SyncReq
	(*InvoiceIdent)(nil), // 22: main.InvoiceIdent
	(*ScrubRes)(nil),     // 23: main.ScrubRes
	(*ScrubIdent)(nil),   // 24: main.ScrubIdent
	(*Metrics)(nil),      // 25: main.Metrics
	(*TestData)(nil),     // 26: main.TestData
}
var file_grpc_proto_depIdxs = []int32{
	3,  // 0: main.TestData.claims:type_name -> main.Claim
	10, // 1: main.TestData.entities:type_name -> main.Entity
	11, // 2: main.TestData.pharmacies:type_name -> main.Pharmacy
	12, // 3: main.TestData.ndcs:type_name -> main.NDC
	13, // 4: main.TestData.spis:type_name -> main.SPI
	14, // 5: main.TestData.desigs:type_name -> main.Designation
	15, // 6: main.TestData.ldns:type_name -> main.LDN
	16, // 7: main.TestData.esp1:type_name -> main.ESP1PharmNDC
	17, // 8: main.TestData.ledger:type_name -> main.Eligibility
	19, // 9: main.Atlas.Ping:input_type -> main.Req
	1,  // 10: main.Atlas.UploadInvoice:input_type -> main.Rebate
	22, // 11: main.Atlas.RunScrub:input_type -> main.InvoiceIdent
	22, // 12: main.Atlas.RunQueue:input_type -> main.InvoiceIdent
	24, // 13: main.Atlas.GetScrub:input_type -> main.ScrubIdent
	24, // 14: main.Atlas.GetScrubMetrics:input_type -> main.ScrubIdent
	24, // 15: main.Atlas.GetScrubRebates:input_type -> main.ScrubIdent
	24, // 16: main.Atlas.GetScrubFile:input_type -> main.ScrubIdent
	22, // 17: main.Atlas.GetInvoice:input_type -> main.InvoiceIdent
	22, // 18: main.Atlas.GetInvoiceRebates:input_type -> main.InvoiceIdent
	26, // 19: main.Atlas.UploadTest:input_type -> main.TestData
	19, // 20: main.Titan.Ping:input_type -> main.Req
	21, // 21: main.Titan.GetClaims:input_type -> main.SyncReq
	21, // 22: main.Titan.GetSPIs:input_type -> main.SyncReq
	21, // 23: main.Titan.GetNDCs:input_type -> main.SyncReq
	21, // 24: main.Titan.GetEntities:input_type -> main.SyncReq
	21, // 25: main.Titan.GetPharmacies:input_type -> main.SyncReq
	21, // 26: main.Titan.GetESP1Pharms:input_type -> main.SyncReq
	21, // 27: main.Titan.GetEligibilityLedger:input_type -> main.SyncReq
	21, // 28: main.Titan.GetAuths:input_type -> main.SyncReq
	21, // 29: main.Titan.GetDesignations:input_type -> main.SyncReq
	21, // 30: main.Titan.GetLDNs:input_type -> main.SyncReq
	9,  // 31: main.Titan.SyncCommands:input_type -> main.Command
	2,  // 32: main.Titan.SyncScrubs:input_type -> main.Scrub
	25, // 33: main.Titan.SyncMetrics:input_type -> main.Metrics
	4,  // 34: main.Titan.SyncScrubRebates:input_type -> main.ScrubRebate
	7,  // 35: main.Titan.SyncScrubClaims:input_type -> main.ScrubClaim
	5,  // 36: main.Titan.SyncScrubMatches:input_type -> main.ScrubMatch
	6,  // 37: main.Titan.SyncScrubAttempts:input_type -> main.ScrubAttempt
	20, // 38: main.Atlas.Ping:output_type -> main.Res
	20, // 39: main.Atlas.UploadInvoice:output_type -> main.Res
	25, // 40: main.Atlas.RunScrub:output_type -> main.Metrics
	23, // 41: main.Atlas.RunQueue:output_type -> main.ScrubRes
	2,  // 42: main.Atlas.GetScrub:output_type -> main.Scrub
	25, // 43: main.Atlas.GetScrubMetrics:output_type -> main.Metrics
	4,  // 44: main.Atlas.GetScrubRebates:output_type -> main.ScrubRebate
	8,  // 45: main.Atlas.GetScrubFile:output_type -> main.ScrubRow
	0,  // 46: main.Atlas.GetInvoice:output_type -> main.Invoice
	1,  // 47: main.Atlas.GetInvoiceRebates:output_type -> main.Rebate
	20, // 48: main.Atlas.UploadTest:output_type -> main.Res
	20, // 49: main.Titan.Ping:output_type -> main.Res
	3,  // 50: main.Titan.GetClaims:output_type -> main.Claim
	13, // 51: main.Titan.GetSPIs:output_type -> main.SPI
	12, // 52: main.Titan.GetNDCs:output_type -> main.NDC
	10, // 53: main.Titan.GetEntities:output_type -> main.Entity
	11, // 54: main.Titan.GetPharmacies:output_type -> main.Pharmacy
	16, // 55: main.Titan.GetESP1Pharms:output_type -> main.ESP1PharmNDC
	17, // 56: main.Titan.GetEligibilityLedger:output_type -> main.Eligibility
	18, // 57: main.Titan.GetAuths:output_type -> main.Auth
	14, // 58: main.Titan.GetDesignations:output_type -> main.Designation
	15, // 59: main.Titan.GetLDNs:output_type -> main.LDN
	20, // 60: main.Titan.SyncCommands:output_type -> main.Res
	20, // 61: main.Titan.SyncScrubs:output_type -> main.Res
	20, // 62: main.Titan.SyncMetrics:output_type -> main.Res
	20, // 63: main.Titan.SyncScrubRebates:output_type -> main.Res
	20, // 64: main.Titan.SyncScrubClaims:output_type -> main.Res
	20, // 65: main.Titan.SyncScrubMatches:output_type -> main.Res
	20, // 66: main.Titan.SyncScrubAttempts:output_type -> main.Res
	38, // [38:67] is the sub-list for method output_type
	9,  // [9:38] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_grpc_proto_init() }
func file_grpc_proto_init() {
	if File_grpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Invoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Rebate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Scrub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Claim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ScrubRebate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ScrubMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ScrubAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ScrubClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ScrubRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Pharmacy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*NDC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Designation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*LDN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ESP1PharmNDC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Eligibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*InvoiceIdent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ScrubRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ScrubIdent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*TestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_grpc_proto_goTypes,
		DependencyIndexes: file_grpc_proto_depIdxs,
		MessageInfos:      file_grpc_proto_msgTypes,
	}.Build()
	File_grpc_proto = out.File
	file_grpc_proto_rawDesc = nil
	file_grpc_proto_goTypes = nil
	file_grpc_proto_depIdxs = nil
}
