// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: grpc.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Atlas_Ping_FullMethodName       = "/main.Atlas/Ping"
	Atlas_Rebates_FullMethodName    = "/main.Atlas/Rebates"
	Atlas_UploadTest_FullMethodName = "/main.Atlas/UploadTest"
)

// AtlasClient is the client API for Atlas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtlasClient interface {
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	Rebates(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Rebate, Rebate], error)
	UploadTest(ctx context.Context, in *TestData, opts ...grpc.CallOption) (*Res, error)
}

type atlasClient struct {
	cc grpc.ClientConnInterface
}

func NewAtlasClient(cc grpc.ClientConnInterface) AtlasClient {
	return &atlasClient{cc}
}

func (c *atlasClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Res)
	err := c.cc.Invoke(ctx, Atlas_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) Rebates(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Rebate, Rebate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Atlas_ServiceDesc.Streams[0], Atlas_Rebates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Rebate, Rebate]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Atlas_RebatesClient = grpc.BidiStreamingClient[Rebate, Rebate]

func (c *atlasClient) UploadTest(ctx context.Context, in *TestData, opts ...grpc.CallOption) (*Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Res)
	err := c.cc.Invoke(ctx, Atlas_UploadTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtlasServer is the server API for Atlas service.
// All implementations must embed UnimplementedAtlasServer
// for forward compatibility.
type AtlasServer interface {
	Ping(context.Context, *Req) (*Res, error)
	Rebates(grpc.BidiStreamingServer[Rebate, Rebate]) error
	UploadTest(context.Context, *TestData) (*Res, error)
	mustEmbedUnimplementedAtlasServer()
}

// UnimplementedAtlasServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAtlasServer struct{}

func (UnimplementedAtlasServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAtlasServer) Rebates(grpc.BidiStreamingServer[Rebate, Rebate]) error {
	return status.Errorf(codes.Unimplemented, "method Rebates not implemented")
}
func (UnimplementedAtlasServer) UploadTest(context.Context, *TestData) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadTest not implemented")
}
func (UnimplementedAtlasServer) mustEmbedUnimplementedAtlasServer() {}
func (UnimplementedAtlasServer) testEmbeddedByValue()               {}

// UnsafeAtlasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtlasServer will
// result in compilation errors.
type UnsafeAtlasServer interface {
	mustEmbedUnimplementedAtlasServer()
}

func RegisterAtlasServer(s grpc.ServiceRegistrar, srv AtlasServer) {
	// If the following call pancis, it indicates UnimplementedAtlasServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Atlas_ServiceDesc, srv)
}

func _Atlas_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_Rebates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtlasServer).Rebates(&grpc.GenericServerStream[Rebate, Rebate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Atlas_RebatesServer = grpc.BidiStreamingServer[Rebate, Rebate]

func _Atlas_UploadTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UploadTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_UploadTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UploadTest(ctx, req.(*TestData))
	}
	return interceptor(ctx, in, info, handler)
}

// Atlas_ServiceDesc is the grpc.ServiceDesc for Atlas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Atlas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Atlas",
	HandlerType: (*AtlasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Atlas_Ping_Handler,
		},
		{
			MethodName: "UploadTest",
			Handler:    _Atlas_UploadTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Rebates",
			Handler:       _Atlas_Rebates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}

const (
	Titan_Ping_FullMethodName                 = "/main.Titan/Ping"
	Titan_GetClaims_FullMethodName            = "/main.Titan/GetClaims"
	Titan_GetSPIs_FullMethodName              = "/main.Titan/GetSPIs"
	Titan_GetNDCs_FullMethodName              = "/main.Titan/GetNDCs"
	Titan_GetEntities_FullMethodName          = "/main.Titan/GetEntities"
	Titan_GetPharmacies_FullMethodName        = "/main.Titan/GetPharmacies"
	Titan_GetESP1Pharms_FullMethodName        = "/main.Titan/GetESP1Pharms"
	Titan_GetEligibilityLedger_FullMethodName = "/main.Titan/GetEligibilityLedger"
	Titan_GetAuths_FullMethodName             = "/main.Titan/GetAuths"
	Titan_Scrubs_FullMethodName               = "/main.Titan/Scrubs"
	Titan_Rebates_FullMethodName              = "/main.Titan/Rebates"
	Titan_ClaimsUsed_FullMethodName           = "/main.Titan/ClaimsUsed"
	Titan_RebateClaims_FullMethodName         = "/main.Titan/RebateClaims"
)

// TitanClient is the client API for Titan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TitanClient interface {
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	GetClaims(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Claim], error)
	GetSPIs(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SPI], error)
	GetNDCs(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NDC], error)
	GetEntities(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Entity], error)
	GetPharmacies(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Pharmacy], error)
	GetESP1Pharms(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ESP1PharmNDC], error)
	GetEligibilityLedger(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Eligibility], error)
	GetAuths(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Auth], error)
	Scrubs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Scrub, Res], error)
	Rebates(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TitanRebate, Res], error)
	ClaimsUsed(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ClaimUse, Res], error)
	RebateClaims(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RebateClaim, Res], error)
}

type titanClient struct {
	cc grpc.ClientConnInterface
}

func NewTitanClient(cc grpc.ClientConnInterface) TitanClient {
	return &titanClient{cc}
}

func (c *titanClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Res)
	err := c.cc.Invoke(ctx, Titan_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titanClient) GetClaims(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Claim], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Titan_ServiceDesc.Streams[0], Titan_GetClaims_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncReq, Claim]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetClaimsClient = grpc.ServerStreamingClient[Claim]

func (c *titanClient) GetSPIs(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SPI], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Titan_ServiceDesc.Streams[1], Titan_GetSPIs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncReq, SPI]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetSPIsClient = grpc.ServerStreamingClient[SPI]

func (c *titanClient) GetNDCs(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NDC], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Titan_ServiceDesc.Streams[2], Titan_GetNDCs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncReq, NDC]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetNDCsClient = grpc.ServerStreamingClient[NDC]

func (c *titanClient) GetEntities(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Entity], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Titan_ServiceDesc.Streams[3], Titan_GetEntities_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncReq, Entity]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetEntitiesClient = grpc.ServerStreamingClient[Entity]

func (c *titanClient) GetPharmacies(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Pharmacy], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Titan_ServiceDesc.Streams[4], Titan_GetPharmacies_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncReq, Pharmacy]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetPharmaciesClient = grpc.ServerStreamingClient[Pharmacy]

func (c *titanClient) GetESP1Pharms(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ESP1PharmNDC], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Titan_ServiceDesc.Streams[5], Titan_GetESP1Pharms_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncReq, ESP1PharmNDC]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetESP1PharmsClient = grpc.ServerStreamingClient[ESP1PharmNDC]

func (c *titanClient) GetEligibilityLedger(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Eligibility], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Titan_ServiceDesc.Streams[6], Titan_GetEligibilityLedger_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncReq, Eligibility]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetEligibilityLedgerClient = grpc.ServerStreamingClient[Eligibility]

func (c *titanClient) GetAuths(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Auth], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Titan_ServiceDesc.Streams[7], Titan_GetAuths_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncReq, Auth]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetAuthsClient = grpc.ServerStreamingClient[Auth]

func (c *titanClient) Scrubs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Scrub, Res], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Titan_ServiceDesc.Streams[8], Titan_Scrubs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Scrub, Res]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_ScrubsClient = grpc.ClientStreamingClient[Scrub, Res]

func (c *titanClient) Rebates(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TitanRebate, Res], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Titan_ServiceDesc.Streams[9], Titan_Rebates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TitanRebate, Res]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_RebatesClient = grpc.ClientStreamingClient[TitanRebate, Res]

func (c *titanClient) ClaimsUsed(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ClaimUse, Res], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Titan_ServiceDesc.Streams[10], Titan_ClaimsUsed_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClaimUse, Res]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_ClaimsUsedClient = grpc.ClientStreamingClient[ClaimUse, Res]

func (c *titanClient) RebateClaims(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RebateClaim, Res], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Titan_ServiceDesc.Streams[11], Titan_RebateClaims_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RebateClaim, Res]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_RebateClaimsClient = grpc.ClientStreamingClient[RebateClaim, Res]

// TitanServer is the server API for Titan service.
// All implementations must embed UnimplementedTitanServer
// for forward compatibility.
type TitanServer interface {
	Ping(context.Context, *Req) (*Res, error)
	GetClaims(*SyncReq, grpc.ServerStreamingServer[Claim]) error
	GetSPIs(*SyncReq, grpc.ServerStreamingServer[SPI]) error
	GetNDCs(*SyncReq, grpc.ServerStreamingServer[NDC]) error
	GetEntities(*SyncReq, grpc.ServerStreamingServer[Entity]) error
	GetPharmacies(*SyncReq, grpc.ServerStreamingServer[Pharmacy]) error
	GetESP1Pharms(*SyncReq, grpc.ServerStreamingServer[ESP1PharmNDC]) error
	GetEligibilityLedger(*SyncReq, grpc.ServerStreamingServer[Eligibility]) error
	GetAuths(*SyncReq, grpc.ServerStreamingServer[Auth]) error
	Scrubs(grpc.ClientStreamingServer[Scrub, Res]) error
	Rebates(grpc.ClientStreamingServer[TitanRebate, Res]) error
	ClaimsUsed(grpc.ClientStreamingServer[ClaimUse, Res]) error
	RebateClaims(grpc.ClientStreamingServer[RebateClaim, Res]) error
	mustEmbedUnimplementedTitanServer()
}

// UnimplementedTitanServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTitanServer struct{}

func (UnimplementedTitanServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTitanServer) GetClaims(*SyncReq, grpc.ServerStreamingServer[Claim]) error {
	return status.Errorf(codes.Unimplemented, "method GetClaims not implemented")
}
func (UnimplementedTitanServer) GetSPIs(*SyncReq, grpc.ServerStreamingServer[SPI]) error {
	return status.Errorf(codes.Unimplemented, "method GetSPIs not implemented")
}
func (UnimplementedTitanServer) GetNDCs(*SyncReq, grpc.ServerStreamingServer[NDC]) error {
	return status.Errorf(codes.Unimplemented, "method GetNDCs not implemented")
}
func (UnimplementedTitanServer) GetEntities(*SyncReq, grpc.ServerStreamingServer[Entity]) error {
	return status.Errorf(codes.Unimplemented, "method GetEntities not implemented")
}
func (UnimplementedTitanServer) GetPharmacies(*SyncReq, grpc.ServerStreamingServer[Pharmacy]) error {
	return status.Errorf(codes.Unimplemented, "method GetPharmacies not implemented")
}
func (UnimplementedTitanServer) GetESP1Pharms(*SyncReq, grpc.ServerStreamingServer[ESP1PharmNDC]) error {
	return status.Errorf(codes.Unimplemented, "method GetESP1Pharms not implemented")
}
func (UnimplementedTitanServer) GetEligibilityLedger(*SyncReq, grpc.ServerStreamingServer[Eligibility]) error {
	return status.Errorf(codes.Unimplemented, "method GetEligibilityLedger not implemented")
}
func (UnimplementedTitanServer) GetAuths(*SyncReq, grpc.ServerStreamingServer[Auth]) error {
	return status.Errorf(codes.Unimplemented, "method GetAuths not implemented")
}
func (UnimplementedTitanServer) Scrubs(grpc.ClientStreamingServer[Scrub, Res]) error {
	return status.Errorf(codes.Unimplemented, "method Scrubs not implemented")
}
func (UnimplementedTitanServer) Rebates(grpc.ClientStreamingServer[TitanRebate, Res]) error {
	return status.Errorf(codes.Unimplemented, "method Rebates not implemented")
}
func (UnimplementedTitanServer) ClaimsUsed(grpc.ClientStreamingServer[ClaimUse, Res]) error {
	return status.Errorf(codes.Unimplemented, "method ClaimsUsed not implemented")
}
func (UnimplementedTitanServer) RebateClaims(grpc.ClientStreamingServer[RebateClaim, Res]) error {
	return status.Errorf(codes.Unimplemented, "method RebateClaims not implemented")
}
func (UnimplementedTitanServer) mustEmbedUnimplementedTitanServer() {}
func (UnimplementedTitanServer) testEmbeddedByValue()               {}

// UnsafeTitanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TitanServer will
// result in compilation errors.
type UnsafeTitanServer interface {
	mustEmbedUnimplementedTitanServer()
}

func RegisterTitanServer(s grpc.ServiceRegistrar, srv TitanServer) {
	// If the following call pancis, it indicates UnimplementedTitanServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Titan_ServiceDesc, srv)
}

func _Titan_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitanServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Titan_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitanServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Titan_GetClaims_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TitanServer).GetClaims(m, &grpc.GenericServerStream[SyncReq, Claim]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetClaimsServer = grpc.ServerStreamingServer[Claim]

func _Titan_GetSPIs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TitanServer).GetSPIs(m, &grpc.GenericServerStream[SyncReq, SPI]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetSPIsServer = grpc.ServerStreamingServer[SPI]

func _Titan_GetNDCs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TitanServer).GetNDCs(m, &grpc.GenericServerStream[SyncReq, NDC]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetNDCsServer = grpc.ServerStreamingServer[NDC]

func _Titan_GetEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TitanServer).GetEntities(m, &grpc.GenericServerStream[SyncReq, Entity]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetEntitiesServer = grpc.ServerStreamingServer[Entity]

func _Titan_GetPharmacies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TitanServer).GetPharmacies(m, &grpc.GenericServerStream[SyncReq, Pharmacy]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetPharmaciesServer = grpc.ServerStreamingServer[Pharmacy]

func _Titan_GetESP1Pharms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TitanServer).GetESP1Pharms(m, &grpc.GenericServerStream[SyncReq, ESP1PharmNDC]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetESP1PharmsServer = grpc.ServerStreamingServer[ESP1PharmNDC]

func _Titan_GetEligibilityLedger_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TitanServer).GetEligibilityLedger(m, &grpc.GenericServerStream[SyncReq, Eligibility]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetEligibilityLedgerServer = grpc.ServerStreamingServer[Eligibility]

func _Titan_GetAuths_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TitanServer).GetAuths(m, &grpc.GenericServerStream[SyncReq, Auth]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_GetAuthsServer = grpc.ServerStreamingServer[Auth]

func _Titan_Scrubs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TitanServer).Scrubs(&grpc.GenericServerStream[Scrub, Res]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_ScrubsServer = grpc.ClientStreamingServer[Scrub, Res]

func _Titan_Rebates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TitanServer).Rebates(&grpc.GenericServerStream[TitanRebate, Res]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_RebatesServer = grpc.ClientStreamingServer[TitanRebate, Res]

func _Titan_ClaimsUsed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TitanServer).ClaimsUsed(&grpc.GenericServerStream[ClaimUse, Res]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_ClaimsUsedServer = grpc.ClientStreamingServer[ClaimUse, Res]

func _Titan_RebateClaims_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TitanServer).RebateClaims(&grpc.GenericServerStream[RebateClaim, Res]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Titan_RebateClaimsServer = grpc.ClientStreamingServer[RebateClaim, Res]

// Titan_ServiceDesc is the grpc.ServiceDesc for Titan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Titan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Titan",
	HandlerType: (*TitanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Titan_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClaims",
			Handler:       _Titan_GetClaims_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSPIs",
			Handler:       _Titan_GetSPIs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetNDCs",
			Handler:       _Titan_GetNDCs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEntities",
			Handler:       _Titan_GetEntities_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPharmacies",
			Handler:       _Titan_GetPharmacies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetESP1Pharms",
			Handler:       _Titan_GetESP1Pharms_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEligibilityLedger",
			Handler:       _Titan_GetEligibilityLedger_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAuths",
			Handler:       _Titan_GetAuths_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Scrubs",
			Handler:       _Titan_Scrubs_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Rebates",
			Handler:       _Titan_Rebates_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ClaimsUsed",
			Handler:       _Titan_ClaimsUsed_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RebateClaims",
			Handler:       _Titan_RebateClaims_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
